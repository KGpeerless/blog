{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/robots.txt","path":"robots.txt","modified":0,"renderable":0},{"_id":"themes/ocean/source/404.html","path":"404.html","modified":0,"renderable":1},{"_id":"themes/ocean/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/ocean/source/css/404.styl","path":"css/404.styl","modified":0,"renderable":1},{"_id":"themes/ocean/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/ocean/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"themes/ocean/source/images/hexo-inverted.svg","path":"images/hexo-inverted.svg","modified":0,"renderable":1},{"_id":"themes/ocean/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/ocean/source/images/hexo.svg","path":"images/hexo.svg","modified":0,"renderable":1},{"_id":"themes/ocean/source/images/shark-inverted.svg","path":"images/shark-inverted.svg","modified":0,"renderable":1},{"_id":"themes/ocean/source/images/shark.svg","path":"images/shark.svg","modified":0,"renderable":1},{"_id":"themes/ocean/source/js/lazyload.min.js","path":"js/lazyload.min.js","modified":0,"renderable":1},{"_id":"themes/ocean/source/js/ocean.js","path":"js/ocean.js","modified":0,"renderable":1},{"_id":"themes/ocean/source/js/pace.min.js","path":"js/pace.min.js","modified":0,"renderable":1},{"_id":"themes/ocean/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/ocean/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"themes/ocean/source/js/jquery-2.0.3.min.js","path":"js/jquery-2.0.3.min.js","modified":0,"renderable":1},{"_id":"themes/ocean/source/css/feathericon/feathericon.woff","path":"css/feathericon/feathericon.woff","modified":0,"renderable":1},{"_id":"themes/ocean/source/css/feathericon/feathericon.ttf","path":"css/feathericon/feathericon.ttf","modified":0,"renderable":1},{"_id":"themes/ocean/source/css/feathericon/feathericon.eot","path":"css/feathericon/feathericon.eot","modified":0,"renderable":1},{"_id":"themes/ocean/source/css/feathericon/feathericon.woff2","path":"css/feathericon/feathericon.woff2","modified":0,"renderable":1},{"_id":"themes/ocean/source/css/feathericon/feathericon.svg","path":"css/feathericon/feathericon.svg","modified":0,"renderable":1},{"_id":"themes/ocean/source/images/使用HexoEditor/20190109042232131.png","path":"images/使用HexoEditor/20190109042232131.png","modified":0,"renderable":1},{"_id":"themes/ocean/source/images/如何申请SSL证书，让Google浏览器访问网站带安全锁/20181229122944873.png","path":"images/如何申请SSL证书，让Google浏览器访问网站带安全锁/20181229122944873.png","modified":0,"renderable":1},{"_id":"themes/ocean/source/images/forrestgump.png","path":"images/forrestgump.png","modified":0,"renderable":1},{"_id":"themes/ocean/source/images/如何申请SSL证书，让Google浏览器访问网站带安全锁/20181229121842103.png","path":"images/如何申请SSL证书，让Google浏览器访问网站带安全锁/20181229121842103.png","modified":0,"renderable":1},{"_id":"themes/ocean/source/images/如何申请SSL证书，让Google浏览器访问网站带安全锁/20181229122528270.png","path":"images/如何申请SSL证书，让Google浏览器访问网站带安全锁/20181229122528270.png","modified":0,"renderable":1},{"_id":"themes/ocean/source/images/如何申请SSL证书，让Google浏览器访问网站带安全锁/20181229122550971.png","path":"images/如何申请SSL证书，让Google浏览器访问网站带安全锁/20181229122550971.png","modified":0,"renderable":1},{"_id":"themes/ocean/source/images/如何申请SSL证书，让Google浏览器访问网站带安全锁/20181229122634660.png","path":"images/如何申请SSL证书，让Google浏览器访问网站带安全锁/20181229122634660.png","modified":0,"renderable":1},{"_id":"themes/ocean/source/images/如何申请SSL证书，让Google浏览器访问网站带安全锁/20181229123047478.png","path":"images/如何申请SSL证书，让Google浏览器访问网站带安全锁/20181229123047478.png","modified":0,"renderable":1},{"_id":"themes/ocean/source/images/如何使本地可以写博客/20181229010924688.png","path":"images/如何使本地可以写博客/20181229010924688.png","modified":0,"renderable":1},{"_id":"themes/ocean/source/images/如何申请SSL证书，让Google浏览器访问网站带安全锁/20181229121428425.png","path":"images/如何申请SSL证书，让Google浏览器访问网站带安全锁/20181229121428425.png","modified":0,"renderable":1},{"_id":"themes/ocean/source/images/如何申请SSL证书，让Google浏览器访问网站带安全锁/20181229121524488.png","path":"images/如何申请SSL证书，让Google浏览器访问网站带安全锁/20181229121524488.png","modified":0,"renderable":1},{"_id":"themes/ocean/source/images/使用HexoEditor/20181227014004002.png","path":"images/使用HexoEditor/20181227014004002.png","modified":0,"renderable":1},{"_id":"themes/ocean/source/images/使用HexoEditor/20181227014233026.png","path":"images/使用HexoEditor/20181227014233026.png","modified":0,"renderable":1},{"_id":"themes/ocean/source/images/使用HexoEditor/20181227022020408.png","path":"images/使用HexoEditor/20181227022020408.png","modified":0,"renderable":1}],"Cache":[{"_id":"themes/ocean/_config.yml","hash":"fa0ebab27852705bb768b8d5037f165c365a2792","modified":1545892087040},{"_id":"source/robots.txt","hash":"4d7c79e8c1e861f577b8bd44b609066938dde6d4","modified":1545929512962},{"_id":"themes/ocean/README.md","hash":"6df352b0f49a3ff648bfd2ef3bfc9f17227298c6","modified":1545648060000},{"_id":"source/.DS_Store","hash":"64c119b0882e986a906f1196a6a5feb86a39a2c3","modified":1546019652636},{"_id":"themes/ocean/package.json","hash":"b993176f8c35bc3ab9dbd8642ec6cd125fcb447e","modified":1545648060000},{"_id":"source/_posts/.DS_Store","hash":"196f6e849649c8a0dc505bbe31c6502aa248aab1","modified":1546056128828},{"_id":"source/_posts/使用HexoEditor.md","hash":"3194e3b28d7cc19096e3f18fb98dc2f9aa541efd","modified":1546056591118},{"_id":"source/_posts/Laravel笔记.md","hash":"549f4cd32818e94f52decad3bd0bbb6bb029dd65","modified":1547619186957},{"_id":"source/_posts/如何使本地可以写博客.md","hash":"03530549f1eb924d08dfc8791ec624a13ccca792","modified":1546056614759},{"_id":"source/_posts/seo站点优化.md","hash":"543b35a3374c89da637286c9293cbb41c11c7dd5","modified":1546056604156},{"_id":"source/categories/index.md","hash":"d191303c9a27c8a67375fa67d193008bead1d960","modified":1545926343801},{"_id":"source/_posts/晚安世界，又是一个研究博客的夜晚.md","hash":"4af3b4409e7dd1ae57f1381331509404aeb477fa","modified":1546056619516},{"_id":"source/_posts/如何申请SSL证书，让Google浏览器访问网站带安全锁.md","hash":"4adea28947ad153ec309a765a60b90adc26ae0da","modified":1547619155966},{"_id":"source/about/index.md","hash":"dac5d06bacd885997bf6512cf84ff94f6428fe0f","modified":1547717089437},{"_id":"themes/ocean/.git/config","hash":"1e8895ff50e93c6cfc6f90406990ee28a6570788","modified":1545648060000},{"_id":"themes/ocean/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1545648060000},{"_id":"themes/ocean/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1545648060000},{"_id":"themes/ocean/.git/index","hash":"c79aa09d2fb80c7f15843a849f22da59a0de45f0","modified":1547195765550},{"_id":"themes/ocean/.git/packed-refs","hash":"c48cd247749c3e70390aa5861ad1699695f0fcdb","modified":1545648060000},{"_id":"themes/ocean/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1545648060000},{"_id":"themes/ocean/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1545648060000},{"_id":"themes/ocean/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1545648060000},{"_id":"themes/ocean/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1545648060000},{"_id":"themes/ocean/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1545648060000},{"_id":"themes/ocean/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1545648060000},{"_id":"themes/ocean/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1545648060000},{"_id":"themes/ocean/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1545648060000},{"_id":"themes/ocean/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1545648060000},{"_id":"themes/ocean/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1545648060000},{"_id":"themes/ocean/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1545648060000},{"_id":"themes/ocean/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1545648060000},{"_id":"themes/ocean/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1545648060000},{"_id":"themes/ocean/layout/category.ejs","hash":"879fd6e2b5b70a4f4976efe76c6449d371721801","modified":1545848973029},{"_id":"themes/ocean/layout/index.ejs","hash":"61b9f5d2670fca9208375719c2eb27172dd95a2f","modified":1546018269628},{"_id":"themes/ocean/layout/page.ejs","hash":"a9a48ae63f5d68a36382951166fdd6e482b901f1","modified":1545648060000},{"_id":"themes/ocean/layout/post.ejs","hash":"a9a48ae63f5d68a36382951166fdd6e482b901f1","modified":1545648060000},{"_id":"themes/ocean/layout/layout.ejs","hash":"9ce598d82d973518e255fe64019b8523a2d65796","modified":1545648060000},{"_id":"themes/ocean/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1545848982039},{"_id":"themes/ocean/source/404.html","hash":"fe1497ac9b2d47f4e3e880946e22fbfe3db7496e","modified":1545648060000},{"_id":"themes/ocean/source/favicon.ico","hash":"0f20298a6a4d1ebd7a7ae7b87d7a3ae9afec0623","modified":1545660043988},{"_id":"themes/ocean/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1545648060000},{"_id":"themes/ocean/.git/logs/HEAD","hash":"e419d9bd3b505c9a80451c8205fae9cccc95cbf0","modified":1545648060000},{"_id":"themes/ocean/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1545648060000},{"_id":"themes/ocean/.git/hooks/applypatch-msg.sample","hash":"86b9655a9ebbde13ac8dd5795eb4d5b539edab0f","modified":1545648060000},{"_id":"themes/ocean/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1545648060000},{"_id":"themes/ocean/.git/hooks/pre-applypatch.sample","hash":"42fa41564917b44183a50c4d94bb03e1768ddad8","modified":1545648060000},{"_id":"themes/ocean/.git/hooks/pre-commit.sample","hash":"e6c9fe47f7506171be08ed90baaf91d49bc7fe0c","modified":1545648060000},{"_id":"themes/ocean/.git/hooks/pre-push.sample","hash":"503c3d2cd9066c2329ae84309c03a4c274f6d90e","modified":1545648060000},{"_id":"themes/ocean/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1545648060000},{"_id":"themes/ocean/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1545648060000},{"_id":"themes/ocean/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1545648060000},{"_id":"themes/ocean/layout/_partial/after-footer.ejs","hash":"2830302eeba71734dea153b790098afbc73ccdc7","modified":1545648060000},{"_id":"themes/ocean/layout/_partial/archive.ejs","hash":"0ff11899dadf5e92ed9a3be68c5549d6ee9198e9","modified":1546017898871},{"_id":"themes/ocean/layout/_partial/archive-post.ejs","hash":"8f46a5a73c95827d812ca3e90ebb0ad8f16fb7b2","modified":1545648060000},{"_id":"themes/ocean/layout/_partial/article.ejs","hash":"2212644caf9e9748872d5f709b999a3a182d4a11","modified":1545729423517},{"_id":"themes/ocean/layout/_partial/category-post.ejs","hash":"04d71fb9dc5fd2ade2b2105dfc7772f9228b673d","modified":1545667995034},{"_id":"themes/ocean/layout/_partial/category.ejs","hash":"e2f2bac4130d2a557c5ef9da5b591b001ea15b33","modified":1545849997040},{"_id":"themes/ocean/layout/_partial/footer.ejs","hash":"d0ddf94a58e1aa321df363075f6dbaecfad3b1c4","modified":1545648060000},{"_id":"themes/ocean/layout/_partial/head.ejs","hash":"77b744273bb7d9f5089dff5ce47d0f2841f7ecf7","modified":1545927049150},{"_id":"themes/ocean/layout/_partial/index-archive.ejs","hash":"a0d23ad6f843a4e604f074f8e4c9cbc628a3a918","modified":1546054710877},{"_id":"themes/ocean/layout/_partial/index-article.ejs","hash":"d68866ee3dc8ac2eda49fbccebd8365cdd79f5ae","modified":1547620399238},{"_id":"themes/ocean/layout/_partial/ocean.ejs","hash":"3fecd578ec5f87b0a2d984a14c8e2e56543cffac","modified":1546021198007},{"_id":"themes/ocean/layout/_partial/sidebar.ejs","hash":"c7f227001cbc19e4a751dae5db0cad8aae780603","modified":1545648060000},{"_id":"themes/ocean/source/css/404.styl","hash":"251f26627c29f97e580a36dac7ae9d99475e95b7","modified":1545648060000},{"_id":"themes/ocean/screenshots/hexo-theme-ocean.jpg","hash":"13b5045d2120cac2f68849757f5e0af08938b7c6","modified":1545648060000},{"_id":"themes/ocean/source/css/_extend.styl","hash":"1fcad5a222c809e81fbbf894dde3922c77eba4d3","modified":1545648060000},{"_id":"themes/ocean/source/css/_mixins.styl","hash":"fbe77673e6f8c714a90daabba6c94cf491650887","modified":1545648060000},{"_id":"themes/ocean/source/css/_feathericon.styl","hash":"8494f0e869411781264868f08eda62fd838e0cee","modified":1545648060000},{"_id":"themes/ocean/source/css/_normalize.styl","hash":"b3337320133b7a336db7033aa6bbe94b054c0b21","modified":1545648060000},{"_id":"themes/ocean/source/css/_variables.styl","hash":"bd526854cd5389d3ed0f36f8cb9394fc08528ae4","modified":1545648060000},{"_id":"themes/ocean/source/css/style.styl","hash":"70db5443cdf39b92fc3f5a05b45f87bed195812b","modified":1546020312368},{"_id":"themes/ocean/source/fancybox/jquery.fancybox.min.css","hash":"2e6a66987dbc7a57bbfd2655bce166739b4ba426","modified":1545648060000},{"_id":"themes/ocean/source/images/hexo-inverted.svg","hash":"525309ea3c7360f83d1d9df6d04c256d7171950d","modified":1545648060000},{"_id":"themes/ocean/source/images/favicon.ico","hash":"0f20298a6a4d1ebd7a7ae7b87d7a3ae9afec0623","modified":1545648060000},{"_id":"themes/ocean/source/images/hexo.svg","hash":"71e7204d04ccfe260f06ea5873484791cd5f404a","modified":1545648060000},{"_id":"themes/ocean/source/images/shark-inverted.svg","hash":"53140244b49bc7d166c85ce2b9ccec5df01c4de0","modified":1545648060000},{"_id":"themes/ocean/source/images/shark.svg","hash":"1e01df6c601300d7c9d2a5e6e16e32d286fe409f","modified":1545648060000},{"_id":"themes/ocean/source/js/lazyload.min.js","hash":"b801b3946fb9b72e03512c0663458e140e1fa77b","modified":1545648060000},{"_id":"themes/ocean/source/js/ocean.js","hash":"f8d6f685d8d90567e1f7e8a627724495984f5058","modified":1546021203284},{"_id":"themes/ocean/source/js/pace.min.js","hash":"d32ab818e0f97d3b0c80f5631fc23d8a0cb52795","modified":1545648060000},{"_id":"themes/ocean/source/js/search.js","hash":"8e5f3726fc0c1dce23834916641b4460dc90a609","modified":1545648060000},{"_id":"themes/ocean/source/css/_partial/comment.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1545648060000},{"_id":"themes/ocean/source/fancybox/jquery.fancybox.min.js","hash":"b2b093d8f5ffeee250c8d0d3a2285a213318e4ea","modified":1545648060000},{"_id":"themes/ocean/source/js/jquery-2.0.3.min.js","hash":"800edb7787c30f4982bf38f2cb8f4f6fb61340e9","modified":1545648060000},{"_id":"themes/ocean/.git/objects/pack/pack-8753967007d95ff7bccdd920d9649366299030ab.idx","hash":"cde3f94c63243760961d6981c395272b8f067ec0","modified":1545648060000},{"_id":"themes/ocean/.git/refs/heads/master","hash":"e0157ff8a7e99517651039a48178212bfbe17106","modified":1545648060000},{"_id":"themes/ocean/layout/_partial/post/albums.ejs","hash":"13300f02ab26cd4926a37a43fb153dd867a52c61","modified":1545648060000},{"_id":"themes/ocean/layout/_partial/post/category.ejs","hash":"85f0ebeceee1c32623bfa1e4170dbe1e34442fea","modified":1545848460377},{"_id":"themes/ocean/layout/_partial/post/gitalk.ejs","hash":"5517bb6deb43496bc42bb2425d96d2db56428102","modified":1545648060000},{"_id":"themes/ocean/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1545648060000},{"_id":"themes/ocean/layout/_partial/post/gallery.ejs","hash":"ed41603b405b404000a3fa1c78fd0bc502f5b45a","modified":1545648060000},{"_id":"themes/ocean/layout/_partial/post/nav.ejs","hash":"3818681130dd29726ab52ecdecf75a3e5ce4ed6b","modified":1545648060000},{"_id":"themes/ocean/layout/_partial/post/title.ejs","hash":"2b7258b0c04a03f9dca7f7d18ae457f8862589bd","modified":1547620599682},{"_id":"themes/ocean/layout/_partial/post/search.ejs","hash":"2c9d19d1685e834aa2020998da2a2d259ce9b9ff","modified":1545648060000},{"_id":"themes/ocean/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1545648060000},{"_id":"themes/ocean/source/css/_partial/albums.styl","hash":"6165dd20b04da5fd29dad065d4a06041534cd7c6","modified":1545648060000},{"_id":"themes/ocean/source/css/_partial/archive.styl","hash":"8aefdcf2d542ad839018c2c58511e3318a38490d","modified":1545648060000},{"_id":"themes/ocean/source/css/_partial/article.styl","hash":"9898672aaf48d2bfade905da0bd24a5435a73a18","modified":1547621087376},{"_id":"themes/ocean/source/css/_partial/articles.styl","hash":"cc65857c62dfd146c0a499c1bdac1c05630b3c04","modified":1545648060000},{"_id":"themes/ocean/source/css/_partial/category.styl","hash":"c9f30ad8752107ce043e808897dfeda3122f74ce","modified":1545847905004},{"_id":"themes/ocean/source/css/_partial/footer.styl","hash":"24779cbce1012d4f35ffc6b3ec0830cbc2ea3b3f","modified":1546019894183},{"_id":"themes/ocean/source/css/_partial/gallery.styl","hash":"7bdc2c9fb4971dbd7511c5cbb69bd611f20db591","modified":1545648060000},{"_id":"themes/ocean/source/css/_partial/gitalk.styl","hash":"e2f4055d56f301d51c050d283d6cd9ed7c46260b","modified":1545648060000},{"_id":"themes/ocean/source/css/_partial/lists.styl","hash":"087f08e0ce9aca48e096dabca6eed2368b5bcd6b","modified":1545648060000},{"_id":"themes/ocean/source/css/_partial/highlight.styl","hash":"c6e99fd23056fb01177aeefbc5dd4a8e88cf8f81","modified":1545648060000},{"_id":"themes/ocean/source/css/_partial/layou.styl","hash":"36d723f6c7a066db6bf5a4ff0795954897555636","modified":1545648060000},{"_id":"themes/ocean/source/css/_partial/mobile.styl","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1545648060000},{"_id":"themes/ocean/source/css/_partial/ocean.styl","hash":"cfe8a3685b5cc1c731a03221501e6e39101eebb9","modified":1546020565809},{"_id":"themes/ocean/source/css/_partial/navbar.styl","hash":"577c013e38c28140f9f1484f8aed0f5b0fd009eb","modified":1545666924705},{"_id":"themes/ocean/source/css/_partial/pace.styl","hash":"e326918ba276ee332d0598d8193ccd8353e7d916","modified":1545648060000},{"_id":"themes/ocean/source/css/_partial/search.styl","hash":"011aaf21942dfff514ed4e98ce20142efbdd1b71","modified":1545648060000},{"_id":"themes/ocean/source/css/_partial/sidebar.styl","hash":"f88a1068d3a9d147106fc6f7de22680be24e3dd0","modified":1545648060000},{"_id":"themes/ocean/source/css/feathericon/feathericon.woff","hash":"d22fe861e47afd92969ab46c7cbb7ea9c225aaf8","modified":1545648060000},{"_id":"themes/ocean/source/css/feathericon/feathericon.ttf","hash":"d0d80c3c960d7d45e6bd7fa428d8a6a8c8245b2d","modified":1545648060000},{"_id":"themes/ocean/source/css/feathericon/feathericon.eot","hash":"e2a01ae6f849841bc7a9fd21e5b7b450f1ded19b","modified":1545648060000},{"_id":"themes/ocean/source/css/feathericon/feathericon.woff2","hash":"2c11c45331d914ee38ad42ccf966132a508b5596","modified":1545648060000},{"_id":"themes/ocean/source/css/feathericon/feathericon.svg","hash":"c113006c6822451802c8457128c352c0e4934453","modified":1545648060000},{"_id":"themes/ocean/source/images/使用HexoEditor/20190109042232131.png","hash":"640e9449f027eb1f6f8eb391c6ab558da42803cd","modified":1547022152137},{"_id":"themes/ocean/source/images/如何申请SSL证书，让Google浏览器访问网站带安全锁/20181229122944873.png","hash":"9fabaff93bf4b37531f4038163645daa22ab3480","modified":1546014584883},{"_id":"themes/ocean/.git/logs/refs/heads/master","hash":"e419d9bd3b505c9a80451c8205fae9cccc95cbf0","modified":1545648060000},{"_id":"themes/ocean/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1545648060000},{"_id":"themes/ocean/source/images/forrestgump.png","hash":"18ad6a8ba815878e36a0d5562136dc4fb8920c12","modified":1545648060000},{"_id":"themes/ocean/source/images/如何申请SSL证书，让Google浏览器访问网站带安全锁/20181229121842103.png","hash":"d7056ec40d4538d1af1218efef624d44cd49d7d3","modified":1546013922113},{"_id":"themes/ocean/source/images/如何申请SSL证书，让Google浏览器访问网站带安全锁/20181229122528270.png","hash":"262398bd9047a36650ac4fc3fd0c9cee71a90520","modified":1546014328274},{"_id":"themes/ocean/source/images/如何申请SSL证书，让Google浏览器访问网站带安全锁/20181229122550971.png","hash":"fdcec8104b9395052d8c5714934acff2c5d409cc","modified":1546014350973},{"_id":"themes/ocean/source/images/如何申请SSL证书，让Google浏览器访问网站带安全锁/20181229122634660.png","hash":"1b15b2dc386bebefd96052bbba15270ff7ef6ab4","modified":1546014394662},{"_id":"themes/ocean/source/images/如何申请SSL证书，让Google浏览器访问网站带安全锁/20181229123047478.png","hash":"e885b9cca5e6c89d7047db81549d277fd5609ab2","modified":1546014647486},{"_id":"themes/ocean/source/images/如何使本地可以写博客/20181229010924688.png","hash":"cd40603762f80ad7127a9cf7a539c2d9b12f785b","modified":1546016964701},{"_id":"themes/ocean/.git/logs/refs/remotes/origin/HEAD","hash":"e419d9bd3b505c9a80451c8205fae9cccc95cbf0","modified":1545648060000},{"_id":"themes/ocean/source/images/如何申请SSL证书，让Google浏览器访问网站带安全锁/20181229121428425.png","hash":"99e2b5e793e67b9be88483791c02dfd1f1fae097","modified":1546013668434},{"_id":"themes/ocean/source/images/如何申请SSL证书，让Google浏览器访问网站带安全锁/20181229121524488.png","hash":"2739f827a9a1ac9d9a6d479d5abe7949d4062298","modified":1546013724493},{"_id":"themes/ocean/source/images/使用HexoEditor/20181227014004002.png","hash":"226959cef08d4f3a21b0be7d2d091b8186e264ef","modified":1545846004014},{"_id":"themes/ocean/source/images/使用HexoEditor/20181227014233026.png","hash":"9a1352fc66b67faeb74afb511bb795ff2aba7045","modified":1545846153036},{"_id":"themes/ocean/.git/objects/pack/pack-8753967007d95ff7bccdd920d9649366299030ab.pack","hash":"63f72875048b13bae52f032ca7e7a0897e457213","modified":1545648060000},{"_id":"themes/ocean/source/images/使用HexoEditor/20181227022020408.png","hash":"ac341dcfc86d581e17e2110ea55d3c8875600edd","modified":1545891620414},{"_id":"public/baidusitemap.xml","hash":"ebe17ddd76c59b1cbe386c51a75c05243689901a","modified":1547716493657},{"_id":"public/search.xml","hash":"ca9b105f59177eef2ff948e27289e84c1b1e6209","modified":1547622288204},{"_id":"public/sitemap.xml","hash":"e814c6186744ad8d26445965c362dadfa05860e1","modified":1547717097453},{"_id":"public/categories/index.html","hash":"5b0753b8b0a89a570297e1d52097d218fd41bb6f","modified":1547622288463},{"_id":"public/about/index.html","hash":"7f9079f3bae2278f24b41041950b0b47c6c81f39","modified":1547717097747},{"_id":"public/how-to-apply-for-ssl-certificate-and-let-google-browser-access-website-with-security-lock.html","hash":"5e220adaeebbb52d829ecdd6eba3f643956a2f67","modified":1547621114825},{"_id":"public/seo-site-optimization.html","hash":"a44e0472ef18a422f3d195b6234cee3c63b58d76","modified":1547621114826},{"_id":"public/using-hexo-editor.html","hash":"ffe524e9d2ee20bf2e97f5f12f3f520365e709db","modified":1547621114826},{"_id":"public/how-to-make-blogs-local.html","hash":"68ea30b066ac4f287c3707630c6d99393ffa4fdc","modified":1547621114826},{"_id":"public/good-night-world,-another-night-of-blogging-research.html","hash":"466107616810369fa7b10dc3e65a04dcabde5ad7","modified":1547621114826},{"_id":"public/archives/index.html","hash":"e3f571daa0ddb84e67eabad0cf4be29ec5a80266","modified":1547622288494},{"_id":"public/archives/2018/index.html","hash":"2935cd18a289f1eecb265eebae93087930141bec","modified":1547621114826},{"_id":"public/archives/2018/12/index.html","hash":"bb9ea1ef9dfbca3b8e893023e4905ddb0585cc25","modified":1547621114826},{"_id":"public/archives/2019/index.html","hash":"4cb8618c39b0de7025cde172e10fd8ee5309d84b","modified":1547622288492},{"_id":"public/archives/2019/01/index.html","hash":"b83d024957806d30cc0b3c897552881ec8c6a39a","modified":1547622288492},{"_id":"public/categories/前端/index.html","hash":"24d57e7adde5d9a2f041395b15adfe6dd51804c8","modified":1547622288479},{"_id":"public/categories/Laravel/index.html","hash":"c83ae954d5b7dd2d28b524318860f96964563f3b","modified":1547622288491},{"_id":"public/categories/打卡/index.html","hash":"be678c2a1b0ba3b70beafbbf0bdab16e28adde4c","modified":1547622288491},{"_id":"public/categories/服务器/index.html","hash":"ecdd62c46d78cd3291a95c97eab9c54adbc5be3d","modified":1547622288492},{"_id":"public/index.html","hash":"0ba711d2a7c15a7305f373ed67df31e70956ac6b","modified":1547622288466},{"_id":"public/tags/HexoEditor/index.html","hash":"e96a890e39c09c43895f5e44bd038ce4b4991a9a","modified":1547621114827},{"_id":"public/tags/markdown/index.html","hash":"b8ba4d401105ff8c64e9fb84428b60e5abc0c5e4","modified":1547621114827},{"_id":"public/tags/Electron/index.html","hash":"664542c40e93c4408db15aeb216618f01a40c0c1","modified":1547621114827},{"_id":"public/tags/凌晨/index.html","hash":"0358b975492634033aa7d0b42ef46aea8c4e47ee","modified":1547621114827},{"_id":"public/tags/Laravel/index.html","hash":"a3706e15ab9b4521e785b65ab9e921ad30262083","modified":1547621114827},{"_id":"public/tags/Eloquent/index.html","hash":"2d4205fa15613d82ae495e4fa3ff6daef1a76337","modified":1547621114827},{"_id":"public/tags/Route/index.html","hash":"50a4fe408fec9b82c20a5f00c3b1e6c8ebeffcc6","modified":1547621114828},{"_id":"public/tags/seo/index.html","hash":"8e8c943fa51a750cfeed97dcb84b785fe4f5b50d","modified":1547621114828},{"_id":"public/tags/translat/index.html","hash":"06d54d43c704c4662bdd63eab26d599f88a9f8c3","modified":1547621114828},{"_id":"public/tags/SSL/index.html","hash":"8d03b9385e8d525227537973f1fb69b6a4f58b2e","modified":1547621114828},{"_id":"public/tags/https/index.html","hash":"af25b99fd3c8a831532db005f7375aff62a4345d","modified":1547621114828},{"_id":"public/tags/nignx/index.html","hash":"732e1dabaa85e3bcf15b46600448baed2489bb74","modified":1547621114828},{"_id":"public/laravel-notes.html","hash":"2ec777db9453170892ba90d5685d11a81f9daacc","modified":1547622288492},{"_id":"public/robots.txt","hash":"4d7c79e8c1e861f577b8bd44b609066938dde6d4","modified":1547621114839},{"_id":"public/favicon.ico","hash":"0f20298a6a4d1ebd7a7ae7b87d7a3ae9afec0623","modified":1547621114839},{"_id":"public/images/hexo-inverted.svg","hash":"525309ea3c7360f83d1d9df6d04c256d7171950d","modified":1547621114839},{"_id":"public/images/favicon.ico","hash":"0f20298a6a4d1ebd7a7ae7b87d7a3ae9afec0623","modified":1547621114840},{"_id":"public/images/hexo.svg","hash":"71e7204d04ccfe260f06ea5873484791cd5f404a","modified":1547621114840},{"_id":"public/images/shark-inverted.svg","hash":"53140244b49bc7d166c85ce2b9ccec5df01c4de0","modified":1547621114840},{"_id":"public/images/shark.svg","hash":"1e01df6c601300d7c9d2a5e6e16e32d286fe409f","modified":1547621114840},{"_id":"public/css/feathericon/feathericon.woff","hash":"d22fe861e47afd92969ab46c7cbb7ea9c225aaf8","modified":1547621114840},{"_id":"public/css/feathericon/feathericon.ttf","hash":"d0d80c3c960d7d45e6bd7fa428d8a6a8c8245b2d","modified":1547621114840},{"_id":"public/css/feathericon/feathericon.woff2","hash":"2c11c45331d914ee38ad42ccf966132a508b5596","modified":1547621114840},{"_id":"public/css/feathericon/feathericon.eot","hash":"e2a01ae6f849841bc7a9fd21e5b7b450f1ded19b","modified":1547621114840},{"_id":"public/css/feathericon/feathericon.svg","hash":"c113006c6822451802c8457128c352c0e4934453","modified":1547621115204},{"_id":"public/images/使用HexoEditor/20190109042232131.png","hash":"640e9449f027eb1f6f8eb391c6ab558da42803cd","modified":1547621115206},{"_id":"public/images/如何申请SSL证书，让Google浏览器访问网站带安全锁/20181229122944873.png","hash":"9fabaff93bf4b37531f4038163645daa22ab3480","modified":1547621115207},{"_id":"public/css/404.css","hash":"e6c2652f6b52719924537491b5d8b8b6413b64c7","modified":1547621115254},{"_id":"public/js/lazyload.min.js","hash":"b801b3946fb9b72e03512c0663458e140e1fa77b","modified":1547621115254},{"_id":"public/js/ocean.js","hash":"f8d6f685d8d90567e1f7e8a627724495984f5058","modified":1547621115255},{"_id":"public/js/search.js","hash":"8e5f3726fc0c1dce23834916641b4460dc90a609","modified":1547621115255},{"_id":"public/404.html","hash":"173badd3be6586e0c31b78f1541aafcb1899cf78","modified":1547621115255},{"_id":"public/css/style.css","hash":"596cc40a7091f79634a9ea9887e45fe91f30ed1d","modified":1547621115255},{"_id":"public/images/如何申请SSL证书，让Google浏览器访问网站带安全锁/20181229121842103.png","hash":"d7056ec40d4538d1af1218efef624d44cd49d7d3","modified":1547621115255},{"_id":"public/images/如何申请SSL证书，让Google浏览器访问网站带安全锁/20181229122528270.png","hash":"262398bd9047a36650ac4fc3fd0c9cee71a90520","modified":1547621115256},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"2e6a66987dbc7a57bbfd2655bce166739b4ba426","modified":1547621115264},{"_id":"public/js/pace.min.js","hash":"d32ab818e0f97d3b0c80f5631fc23d8a0cb52795","modified":1547621115264},{"_id":"public/images/如何申请SSL证书，让Google浏览器访问网站带安全锁/20181229122634660.png","hash":"1b15b2dc386bebefd96052bbba15270ff7ef6ab4","modified":1547621115265},{"_id":"public/images/如何申请SSL证书，让Google浏览器访问网站带安全锁/20181229122550971.png","hash":"fdcec8104b9395052d8c5714934acff2c5d409cc","modified":1547621115266},{"_id":"public/images/如何申请SSL证书，让Google浏览器访问网站带安全锁/20181229123047478.png","hash":"e885b9cca5e6c89d7047db81549d277fd5609ab2","modified":1547621115266},{"_id":"public/images/forrestgump.png","hash":"18ad6a8ba815878e36a0d5562136dc4fb8920c12","modified":1547621115272},{"_id":"public/images/如何使本地可以写博客/20181229010924688.png","hash":"cd40603762f80ad7127a9cf7a539c2d9b12f785b","modified":1547621115272},{"_id":"public/images/如何申请SSL证书，让Google浏览器访问网站带安全锁/20181229121428425.png","hash":"99e2b5e793e67b9be88483791c02dfd1f1fae097","modified":1547621115276},{"_id":"public/images/如何申请SSL证书，让Google浏览器访问网站带安全锁/20181229121524488.png","hash":"2739f827a9a1ac9d9a6d479d5abe7949d4062298","modified":1547621115277},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"b2b093d8f5ffeee250c8d0d3a2285a213318e4ea","modified":1547621115307},{"_id":"public/js/jquery-2.0.3.min.js","hash":"800edb7787c30f4982bf38f2cb8f4f6fb61340e9","modified":1547621115310},{"_id":"public/images/使用HexoEditor/20181227014004002.png","hash":"226959cef08d4f3a21b0be7d2d091b8186e264ef","modified":1547621115310},{"_id":"public/images/使用HexoEditor/20181227014233026.png","hash":"9a1352fc66b67faeb74afb511bb795ff2aba7045","modified":1547621115314},{"_id":"public/images/使用HexoEditor/20181227022020408.png","hash":"ac341dcfc86d581e17e2110ea55d3c8875600edd","modified":1547621115317},{"_id":"source/_posts/php扩展swoole，make安装时遇到的问题.md","hash":"071aef63596dc431d56217ea1ec58e0b45f2b692","modified":1547622287765},{"_id":"public/php-extends-swoole,-make-installation-problems-encountered.html","hash":"6962594e9996f07bbfa1f4cdd7a92f6d927761b0","modified":1547622288494},{"_id":"public/categories/php/index.html","hash":"bb0311c863ffa84690b482ba0d33e187609dd7f0","modified":1547622288494},{"_id":"public/tags/swoole/index.html","hash":"9599e19f520a1c87eab8458af84a1258b0601afc","modified":1547622288494},{"_id":"public/tags/php/index.html","hash":"215b6c7b747d3906ee83a4b6fcae8294273171f8","modified":1547622288494}],"Category":[{"name":"前端","_id":"cjqytnhp20004jygv8pe9nmf2"},{"name":"Laravel","_id":"cjqytnhpd000djygvx7mn35wg"},{"name":"打卡","_id":"cjqytnhpe000hjygvu6fetvs9"},{"name":"服务器","_id":"cjqytnhpg000mjygv2n1d6w9f"},{"name":"php","_id":"cjqyucnj20001vvgvlmx671f5"}],"Data":[],"Page":[{"title":"分类","type":"categories","layout":"category","comments":0,"translate_title":"classification","date":"2018-12-24T13:45:42.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ntype: categories\nlayout: category\ncomments: false\ntranslate_title: classification\ndate: 2018-12-24 21:45:42\n---\n","updated":"2018-12-27T15:59:03.801Z","path":"categories/index.html","_id":"cjqytnhoy0001jygv9mkzktis","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"关于我","translate_title":"about-me","date":"2018-12-24T13:47:50.000Z","_content":"\n无心上班的游戏爱好者。\n\n### 2018年的Flag\n<span style=\"color: #ff5555\">1. 还完所有欠款 -- 失败，但是也积攒了一些家产</span>\n<span style=\"color: #ff5555\">2. 健身 -- 失败</span>\n<span style=\"color: #ff5555\">3. 早起早睡 -- 失败</span>\n<span style=\"color: #ff5555\">4. 吃早饭 -- 失败</span>\n\n### 2019年的Flag\n<span style=\"color: #07B507\">1. 5月份之前考完驾照</span>\n<span style=\"color: #07B507\">2. 5月中-6月份买车！！</span>\n<span style=\"color: #07B507\">3. 攒2万块钱的存款</span>\n<span style=\"color: #07B507\">4. 给家里2万块钱</span>\n<span style=\"color: #07B507\">5. 给清哥结婚支援1万</span>\n<span style=\"color: #07B507\">6. 自驾游一次，旅游多个城市</span>\n\nFrom Lay","source":"about/index.md","raw":"---\ntitle: 关于我\ntranslate_title: about-me\ndate: 2018-12-24 21:47:50\n---\n\n无心上班的游戏爱好者。\n\n### 2018年的Flag\n<span style=\"color: #ff5555\">1. 还完所有欠款 -- 失败，但是也积攒了一些家产</span>\n<span style=\"color: #ff5555\">2. 健身 -- 失败</span>\n<span style=\"color: #ff5555\">3. 早起早睡 -- 失败</span>\n<span style=\"color: #ff5555\">4. 吃早饭 -- 失败</span>\n\n### 2019年的Flag\n<span style=\"color: #07B507\">1. 5月份之前考完驾照</span>\n<span style=\"color: #07B507\">2. 5月中-6月份买车！！</span>\n<span style=\"color: #07B507\">3. 攒2万块钱的存款</span>\n<span style=\"color: #07B507\">4. 给家里2万块钱</span>\n<span style=\"color: #07B507\">5. 给清哥结婚支援1万</span>\n<span style=\"color: #07B507\">6. 自驾游一次，旅游多个城市</span>\n\nFrom Lay","updated":"2019-01-17T09:24:49.437Z","path":"about/index.html","_id":"cjqytnhp10003jygvlsoh2fuz","comments":1,"layout":"page","content":"<p>无心上班的游戏爱好者。</p>\n<h3 id=\"2018年的Flag\"><a href=\"#2018年的Flag\" class=\"headerlink\" title=\"2018年的Flag\"></a>2018年的Flag</h3><p><span style=\"color: #ff5555\">1. 还完所有欠款 – 失败，但是也积攒了一些家产</span><br><span style=\"color: #ff5555\">2. 健身 – 失败</span><br><span style=\"color: #ff5555\">3. 早起早睡 – 失败</span><br><span style=\"color: #ff5555\">4. 吃早饭 – 失败</span></p>\n<h3 id=\"2019年的Flag\"><a href=\"#2019年的Flag\" class=\"headerlink\" title=\"2019年的Flag\"></a>2019年的Flag</h3><p><span style=\"color: #07B507\">1. 5月份之前考完驾照</span><br><span style=\"color: #07B507\">2. 5月中-6月份买车！！</span><br><span style=\"color: #07B507\">3. 攒2万块钱的存款</span><br><span style=\"color: #07B507\">4. 给家里2万块钱</span><br><span style=\"color: #07B507\">5. 给清哥结婚支援1万</span><br><span style=\"color: #07B507\">6. 自驾游一次，旅游多个城市</span></p>\n<p>From Lay</p>\n","site":{"data":{}},"excerpt":"","more":"<p>无心上班的游戏爱好者。</p>\n<h3 id=\"2018年的Flag\"><a href=\"#2018年的Flag\" class=\"headerlink\" title=\"2018年的Flag\"></a>2018年的Flag</h3><p><span style=\"color: #ff5555\">1. 还完所有欠款 – 失败，但是也积攒了一些家产</span><br><span style=\"color: #ff5555\">2. 健身 – 失败</span><br><span style=\"color: #ff5555\">3. 早起早睡 – 失败</span><br><span style=\"color: #ff5555\">4. 吃早饭 – 失败</span></p>\n<h3 id=\"2019年的Flag\"><a href=\"#2019年的Flag\" class=\"headerlink\" title=\"2019年的Flag\"></a>2019年的Flag</h3><p><span style=\"color: #07B507\">1. 5月份之前考完驾照</span><br><span style=\"color: #07B507\">2. 5月中-6月份买车！！</span><br><span style=\"color: #07B507\">3. 攒2万块钱的存款</span><br><span style=\"color: #07B507\">4. 给家里2万块钱</span><br><span style=\"color: #07B507\">5. 给清哥结婚支援1万</span><br><span style=\"color: #07B507\">6. 自驾游一次，旅游多个城市</span></p>\n<p>From Lay</p>\n"}],"Post":[{"title":"使用HexoEditor","top":0,"translate_title":"using-hexo-editor","keywords":["hexo-editor","hexo","hexo-admin","hexo后台"],"description":"hexo-editor，hexo，hexo后台，markdown客户端，可以上传图片至七牛云、腾讯云，一键部署","date":"2018-12-26T08:23:04.000Z","_content":"\nHexoEditor是基于Electron开发的。\n可以使用markdown语法并及时预览。\n并可以一键发布。\n在页面美观度上我认为远胜于hexo-admin。\n\n<!-- more -->\n\n## 外观\n![](https://img-qiniu.alwayslay.com/使用HexoEditor/20181227022020408.png)\n\n![](https://img-qiniu.alwayslay.com/使用HexoEditor/20181227014233026.png)\n\n## 克隆仓库\n地址：https://github.com/zhuzhuyule/HexoEditor.git\n\n## 安装模块\n```\nnpm install\n```\n\n## 运行\n```\n# 执行后会打开客户端程序\nnpm start\n```\n\n## 为了方便运行，可以设置别名\n```\n# 我使用的是zsh\nvi ~/.zshrc\n\n# 修改下面这一句，并粘贴到文件中\nalias blog_editor='cd /项目地址/ && npm start'\n\n# 配置生效\nsource ~/.zshrc\n\n# 再次启动客户端\nblog_editor\n```\n","source":"_posts/使用HexoEditor.md","raw":"---\ntitle: 使用HexoEditor\ntop: 0\ntags:\n  - HexoEditor\n  - markdown\n  - Electron\ncategories:\n  - 前端\ntranslate_title: using-hexo-editor\nkeywords: [hexo-editor, hexo, hexo-admin, hexo后台]\ndescription: hexo-editor，hexo，hexo后台，markdown客户端，可以上传图片至七牛云、腾讯云，一键部署\ndate: 2018-12-26 16:23:04\n---\n\nHexoEditor是基于Electron开发的。\n可以使用markdown语法并及时预览。\n并可以一键发布。\n在页面美观度上我认为远胜于hexo-admin。\n\n<!-- more -->\n\n## 外观\n![](https://img-qiniu.alwayslay.com/使用HexoEditor/20181227022020408.png)\n\n![](https://img-qiniu.alwayslay.com/使用HexoEditor/20181227014233026.png)\n\n## 克隆仓库\n地址：https://github.com/zhuzhuyule/HexoEditor.git\n\n## 安装模块\n```\nnpm install\n```\n\n## 运行\n```\n# 执行后会打开客户端程序\nnpm start\n```\n\n## 为了方便运行，可以设置别名\n```\n# 我使用的是zsh\nvi ~/.zshrc\n\n# 修改下面这一句，并粘贴到文件中\nalias blog_editor='cd /项目地址/ && npm start'\n\n# 配置生效\nsource ~/.zshrc\n\n# 再次启动客户端\nblog_editor\n```\n","slug":"使用HexoEditor","published":1,"updated":"2018-12-29T04:09:51.118Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqytnhou0000jygvx275b0p3","content":"<p>HexoEditor是基于Electron开发的。<br>可以使用markdown语法并及时预览。<br>并可以一键发布。<br>在页面美观度上我认为远胜于hexo-admin。</p>\n<a id=\"more\"></a>\n<h2 id=\"外观\"><a href=\"#外观\" class=\"headerlink\" title=\"外观\"></a>外观</h2><p><img src=\"https://img-qiniu.alwayslay.com/使用HexoEditor/20181227022020408.png\" alt=\"\"></p>\n<p><img src=\"https://img-qiniu.alwayslay.com/使用HexoEditor/20181227014233026.png\" alt=\"\"></p>\n<h2 id=\"克隆仓库\"><a href=\"#克隆仓库\" class=\"headerlink\" title=\"克隆仓库\"></a>克隆仓库</h2><p>地址：<a href=\"https://github.com/zhuzhuyule/HexoEditor.git\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">https://github.com/zhuzhuyule/HexoEditor.git</a></p>\n<h2 id=\"安装模块\"><a href=\"#安装模块\" class=\"headerlink\" title=\"安装模块\"></a>安装模块</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 执行后会打开客户端程序</span><br><span class=\"line\">npm start</span><br></pre></td></tr></table></figure>\n<h2 id=\"为了方便运行，可以设置别名\"><a href=\"#为了方便运行，可以设置别名\" class=\"headerlink\" title=\"为了方便运行，可以设置别名\"></a>为了方便运行，可以设置别名</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 我使用的是zsh</span><br><span class=\"line\">vi ~/.zshrc</span><br><span class=\"line\"></span><br><span class=\"line\"># 修改下面这一句，并粘贴到文件中</span><br><span class=\"line\">alias blog_editor=&apos;cd /项目地址/ &amp;&amp; npm start&apos;</span><br><span class=\"line\"></span><br><span class=\"line\"># 配置生效</span><br><span class=\"line\">source ~/.zshrc</span><br><span class=\"line\"></span><br><span class=\"line\"># 再次启动客户端</span><br><span class=\"line\">blog_editor</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>HexoEditor是基于Electron开发的。<br>可以使用markdown语法并及时预览。<br>并可以一键发布。<br>在页面美观度上我认为远胜于hexo-admin。</p>","more":"<h2 id=\"外观\"><a href=\"#外观\" class=\"headerlink\" title=\"外观\"></a>外观</h2><p><img src=\"https://img-qiniu.alwayslay.com/使用HexoEditor/20181227022020408.png\" alt=\"\"></p>\n<p><img src=\"https://img-qiniu.alwayslay.com/使用HexoEditor/20181227014233026.png\" alt=\"\"></p>\n<h2 id=\"克隆仓库\"><a href=\"#克隆仓库\" class=\"headerlink\" title=\"克隆仓库\"></a>克隆仓库</h2><p>地址：<a href=\"https://github.com/zhuzhuyule/HexoEditor.git\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">https://github.com/zhuzhuyule/HexoEditor.git</a></p>\n<h2 id=\"安装模块\"><a href=\"#安装模块\" class=\"headerlink\" title=\"安装模块\"></a>安装模块</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 执行后会打开客户端程序</span><br><span class=\"line\">npm start</span><br></pre></td></tr></table></figure>\n<h2 id=\"为了方便运行，可以设置别名\"><a href=\"#为了方便运行，可以设置别名\" class=\"headerlink\" title=\"为了方便运行，可以设置别名\"></a>为了方便运行，可以设置别名</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 我使用的是zsh</span><br><span class=\"line\">vi ~/.zshrc</span><br><span class=\"line\"></span><br><span class=\"line\"># 修改下面这一句，并粘贴到文件中</span><br><span class=\"line\">alias blog_editor=&apos;cd /项目地址/ &amp;&amp; npm start&apos;</span><br><span class=\"line\"></span><br><span class=\"line\"># 配置生效</span><br><span class=\"line\">source ~/.zshrc</span><br><span class=\"line\"></span><br><span class=\"line\"># 再次启动客户端</span><br><span class=\"line\">blog_editor</span><br></pre></td></tr></table></figure>"},{"title":"如何使本地可以写博客","author":"Lay","top":0,"translate_title":"how-to-make-blogs-local","keywords":["博客","hexo","theme","hexo-主题","nginx hexo","钩子","rsync"],"description":"使用hexo本地写博客，nginx部署hexo，使用钩子将博客的静态资源同步到服务器","date":"2018-12-24T17:33:00.000Z","_content":"\n这篇算是正式的第一篇文章了，之前的都是🦐扯🥚~ \n以下使Mac OS系统的安装步骤。\n\n<!-- more -->\n\n## 安装Homebrew\n\n安装地址：[https://brew.sh/](https://brew.sh/)\n\n## 安装GIT\n\n安装地址: [https://git-scm.com/](https://git-scm.com/)\n\n## 安装环境\n\n```\n# 安装node\nbrew install node@10\n```\n\n## 安装Hexo\n\n```\n# node全局安装hexo\nnpm install hexo-cli -g\n\n# 初始化一个博客\nhexo init <folder>\n\n# 进入博客\ncd <folder>\n\n# 安装模块（根据package.json文件内所使用的包进行安装，成功后会增加package-lock.json的版本来源与记录）\nnpm install\n\n# 运行服务（以下命令二选一）\nhexo server\nhexo s\n```\n\n## 常用命令\n\n```\n# 新建文章\nhexo new post\n\n# 生成静态文件\nhexo generate\nhexo g \n\n# 启本地服务\nhexo server\nhexo s \n\n# 部署静态资源到服务器\nhexo deploy\nhexo d\n```\n\n## 修改主题\n\n```\n# 项目根目录git clone\ngit clone git@github.com/<theme_name>.git themes/<theme_name>\n\n# 根据项目中的安装文档进行npm安装\n# 修改配置文件_config.yml\ntheme: <theme_name>\n\n# 部署\nhexo g -d\n```\n\n## 发布到服务器\n有两种方法部署\n\n> 1.使用钩子将本地部署完成以后生成的静态资源部署到服务器\n\n```\n# _config.yml文件中\ndeploy:\n  type: rsync\n  host: 服务器ip地址\n  user: 使用者名称\n  root: 项目地址（绝对路径）\n  port: 端口号（默认为22）\n  delete: 删除服务器上的旧文件（true|fasle）\n  verbose: 显示调试信息（true|false）\t\n  ignore_errors: 忽略错误（true|false）\n```\n\n> 2.使用git、coding的Pages服务\n\n```\n# 项目git初始化\ngit init\ngit add README.md\ngit commit -m \"first commit\"\ngit remote add origin 你的git仓库地址\ngit push -u origin master\n\n# _config.yml文件中\ndeploy:\n  type: git\n  repo: 你的git仓库地址\n```\n\n使用第二种方法，如果你有域名的话，还可以将pages服务提供给你的域名做跳转，访问它的域名时跳转到你的域名，以coding为例。\n\n![配置Pages服务](https://img-qiniu.alwayslay.com/如何使本地可以写博客/20181229010924688.png)\n\n1. 进入你的域名解析管理页面，添加一条CNAME的记录\n2. 在你hexo的项目source文件夹下新增一个文件CNAME，不要有后缀，然后进入编辑模式，将xxx.coding.me粘贴进去，保存退出\n3. 本地试一下hexo g -d，看是否有向你的coding仓库推送。\n\n## 最后\n拜拜！\n\n","source":"_posts/如何使本地可以写博客.md","raw":"---\ntitle: 如何使本地可以写博客\nauthor: Lay\ntop: 0\ntags:\n  - 凌晨\ncategories:\n  - 前端\ntranslate_title: how-to-make-blogs-local\nkeywords: [博客, hexo, theme, hexo-主题, nginx hexo, 钩子, rsync]\ndescription: 使用hexo本地写博客，nginx部署hexo，使用钩子将博客的静态资源同步到服务器\ndate: 2018-12-25 01:33:00\n---\n\n这篇算是正式的第一篇文章了，之前的都是🦐扯🥚~ \n以下使Mac OS系统的安装步骤。\n\n<!-- more -->\n\n## 安装Homebrew\n\n安装地址：[https://brew.sh/](https://brew.sh/)\n\n## 安装GIT\n\n安装地址: [https://git-scm.com/](https://git-scm.com/)\n\n## 安装环境\n\n```\n# 安装node\nbrew install node@10\n```\n\n## 安装Hexo\n\n```\n# node全局安装hexo\nnpm install hexo-cli -g\n\n# 初始化一个博客\nhexo init <folder>\n\n# 进入博客\ncd <folder>\n\n# 安装模块（根据package.json文件内所使用的包进行安装，成功后会增加package-lock.json的版本来源与记录）\nnpm install\n\n# 运行服务（以下命令二选一）\nhexo server\nhexo s\n```\n\n## 常用命令\n\n```\n# 新建文章\nhexo new post\n\n# 生成静态文件\nhexo generate\nhexo g \n\n# 启本地服务\nhexo server\nhexo s \n\n# 部署静态资源到服务器\nhexo deploy\nhexo d\n```\n\n## 修改主题\n\n```\n# 项目根目录git clone\ngit clone git@github.com/<theme_name>.git themes/<theme_name>\n\n# 根据项目中的安装文档进行npm安装\n# 修改配置文件_config.yml\ntheme: <theme_name>\n\n# 部署\nhexo g -d\n```\n\n## 发布到服务器\n有两种方法部署\n\n> 1.使用钩子将本地部署完成以后生成的静态资源部署到服务器\n\n```\n# _config.yml文件中\ndeploy:\n  type: rsync\n  host: 服务器ip地址\n  user: 使用者名称\n  root: 项目地址（绝对路径）\n  port: 端口号（默认为22）\n  delete: 删除服务器上的旧文件（true|fasle）\n  verbose: 显示调试信息（true|false）\t\n  ignore_errors: 忽略错误（true|false）\n```\n\n> 2.使用git、coding的Pages服务\n\n```\n# 项目git初始化\ngit init\ngit add README.md\ngit commit -m \"first commit\"\ngit remote add origin 你的git仓库地址\ngit push -u origin master\n\n# _config.yml文件中\ndeploy:\n  type: git\n  repo: 你的git仓库地址\n```\n\n使用第二种方法，如果你有域名的话，还可以将pages服务提供给你的域名做跳转，访问它的域名时跳转到你的域名，以coding为例。\n\n![配置Pages服务](https://img-qiniu.alwayslay.com/如何使本地可以写博客/20181229010924688.png)\n\n1. 进入你的域名解析管理页面，添加一条CNAME的记录\n2. 在你hexo的项目source文件夹下新增一个文件CNAME，不要有后缀，然后进入编辑模式，将xxx.coding.me粘贴进去，保存退出\n3. 本地试一下hexo g -d，看是否有向你的coding仓库推送。\n\n## 最后\n拜拜！\n\n","slug":"如何使本地可以写博客","published":1,"updated":"2018-12-29T04:10:14.759Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqytnhp00002jygv7bht5ukd","content":"<p>这篇算是正式的第一篇文章了，之前的都是🦐扯🥚~<br>以下使Mac OS系统的安装步骤。</p>\n<a id=\"more\"></a>\n<h2 id=\"安装Homebrew\"><a href=\"#安装Homebrew\" class=\"headerlink\" title=\"安装Homebrew\"></a>安装Homebrew</h2><p>安装地址：<a href=\"https://brew.sh/\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">https://brew.sh/</a></p>\n<h2 id=\"安装GIT\"><a href=\"#安装GIT\" class=\"headerlink\" title=\"安装GIT\"></a>安装GIT</h2><p>安装地址: <a href=\"https://git-scm.com/\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">https://git-scm.com/</a></p>\n<h2 id=\"安装环境\"><a href=\"#安装环境\" class=\"headerlink\" title=\"安装环境\"></a>安装环境</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装node</span><br><span class=\"line\">brew install node@10</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># node全局安装hexo</span><br><span class=\"line\">npm install hexo-cli -g</span><br><span class=\"line\"></span><br><span class=\"line\"># 初始化一个博客</span><br><span class=\"line\">hexo init &lt;folder&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"># 进入博客</span><br><span class=\"line\">cd &lt;folder&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装模块（根据package.json文件内所使用的包进行安装，成功后会增加package-lock.json的版本来源与记录）</span><br><span class=\"line\">npm install</span><br><span class=\"line\"></span><br><span class=\"line\"># 运行服务（以下命令二选一）</span><br><span class=\"line\">hexo server</span><br><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 新建文章</span><br><span class=\"line\">hexo new post</span><br><span class=\"line\"></span><br><span class=\"line\"># 生成静态文件</span><br><span class=\"line\">hexo generate</span><br><span class=\"line\">hexo g </span><br><span class=\"line\"></span><br><span class=\"line\"># 启本地服务</span><br><span class=\"line\">hexo server</span><br><span class=\"line\">hexo s </span><br><span class=\"line\"></span><br><span class=\"line\"># 部署静态资源到服务器</span><br><span class=\"line\">hexo deploy</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n<h2 id=\"修改主题\"><a href=\"#修改主题\" class=\"headerlink\" title=\"修改主题\"></a>修改主题</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 项目根目录git clone</span><br><span class=\"line\">git clone git@github.com/&lt;theme_name&gt;.git themes/&lt;theme_name&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"># 根据项目中的安装文档进行npm安装</span><br><span class=\"line\"># 修改配置文件_config.yml</span><br><span class=\"line\">theme: &lt;theme_name&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"># 部署</span><br><span class=\"line\">hexo g -d</span><br></pre></td></tr></table></figure>\n<h2 id=\"发布到服务器\"><a href=\"#发布到服务器\" class=\"headerlink\" title=\"发布到服务器\"></a>发布到服务器</h2><p>有两种方法部署</p>\n<blockquote>\n<p>1.使用钩子将本地部署完成以后生成的静态资源部署到服务器</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># _config.yml文件中</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: rsync</span><br><span class=\"line\">  host: 服务器ip地址</span><br><span class=\"line\">  user: 使用者名称</span><br><span class=\"line\">  root: 项目地址（绝对路径）</span><br><span class=\"line\">  port: 端口号（默认为22）</span><br><span class=\"line\">  delete: 删除服务器上的旧文件（true|fasle）</span><br><span class=\"line\">  verbose: 显示调试信息（true|false）\t</span><br><span class=\"line\">  ignore_errors: 忽略错误（true|false）</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>2.使用git、coding的Pages服务</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 项目git初始化</span><br><span class=\"line\">git init</span><br><span class=\"line\">git add README.md</span><br><span class=\"line\">git commit -m &quot;first commit&quot;</span><br><span class=\"line\">git remote add origin 你的git仓库地址</span><br><span class=\"line\">git push -u origin master</span><br><span class=\"line\"></span><br><span class=\"line\"># _config.yml文件中</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: 你的git仓库地址</span><br></pre></td></tr></table></figure>\n<p>使用第二种方法，如果你有域名的话，还可以将pages服务提供给你的域名做跳转，访问它的域名时跳转到你的域名，以coding为例。</p>\n<p><img src=\"https://img-qiniu.alwayslay.com/如何使本地可以写博客/20181229010924688.png\" alt=\"配置Pages服务\"></p>\n<ol>\n<li>进入你的域名解析管理页面，添加一条CNAME的记录</li>\n<li>在你hexo的项目source文件夹下新增一个文件CNAME，不要有后缀，然后进入编辑模式，将xxx.coding.me粘贴进去，保存退出</li>\n<li>本地试一下hexo g -d，看是否有向你的coding仓库推送。</li>\n</ol>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>拜拜！</p>\n","site":{"data":{}},"excerpt":"<p>这篇算是正式的第一篇文章了，之前的都是🦐扯🥚~<br>以下使Mac OS系统的安装步骤。</p>","more":"<h2 id=\"安装Homebrew\"><a href=\"#安装Homebrew\" class=\"headerlink\" title=\"安装Homebrew\"></a>安装Homebrew</h2><p>安装地址：<a href=\"https://brew.sh/\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">https://brew.sh/</a></p>\n<h2 id=\"安装GIT\"><a href=\"#安装GIT\" class=\"headerlink\" title=\"安装GIT\"></a>安装GIT</h2><p>安装地址: <a href=\"https://git-scm.com/\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">https://git-scm.com/</a></p>\n<h2 id=\"安装环境\"><a href=\"#安装环境\" class=\"headerlink\" title=\"安装环境\"></a>安装环境</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装node</span><br><span class=\"line\">brew install node@10</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># node全局安装hexo</span><br><span class=\"line\">npm install hexo-cli -g</span><br><span class=\"line\"></span><br><span class=\"line\"># 初始化一个博客</span><br><span class=\"line\">hexo init &lt;folder&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"># 进入博客</span><br><span class=\"line\">cd &lt;folder&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装模块（根据package.json文件内所使用的包进行安装，成功后会增加package-lock.json的版本来源与记录）</span><br><span class=\"line\">npm install</span><br><span class=\"line\"></span><br><span class=\"line\"># 运行服务（以下命令二选一）</span><br><span class=\"line\">hexo server</span><br><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 新建文章</span><br><span class=\"line\">hexo new post</span><br><span class=\"line\"></span><br><span class=\"line\"># 生成静态文件</span><br><span class=\"line\">hexo generate</span><br><span class=\"line\">hexo g </span><br><span class=\"line\"></span><br><span class=\"line\"># 启本地服务</span><br><span class=\"line\">hexo server</span><br><span class=\"line\">hexo s </span><br><span class=\"line\"></span><br><span class=\"line\"># 部署静态资源到服务器</span><br><span class=\"line\">hexo deploy</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n<h2 id=\"修改主题\"><a href=\"#修改主题\" class=\"headerlink\" title=\"修改主题\"></a>修改主题</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 项目根目录git clone</span><br><span class=\"line\">git clone git@github.com/&lt;theme_name&gt;.git themes/&lt;theme_name&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"># 根据项目中的安装文档进行npm安装</span><br><span class=\"line\"># 修改配置文件_config.yml</span><br><span class=\"line\">theme: &lt;theme_name&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"># 部署</span><br><span class=\"line\">hexo g -d</span><br></pre></td></tr></table></figure>\n<h2 id=\"发布到服务器\"><a href=\"#发布到服务器\" class=\"headerlink\" title=\"发布到服务器\"></a>发布到服务器</h2><p>有两种方法部署</p>\n<blockquote>\n<p>1.使用钩子将本地部署完成以后生成的静态资源部署到服务器</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># _config.yml文件中</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: rsync</span><br><span class=\"line\">  host: 服务器ip地址</span><br><span class=\"line\">  user: 使用者名称</span><br><span class=\"line\">  root: 项目地址（绝对路径）</span><br><span class=\"line\">  port: 端口号（默认为22）</span><br><span class=\"line\">  delete: 删除服务器上的旧文件（true|fasle）</span><br><span class=\"line\">  verbose: 显示调试信息（true|false）\t</span><br><span class=\"line\">  ignore_errors: 忽略错误（true|false）</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>2.使用git、coding的Pages服务</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 项目git初始化</span><br><span class=\"line\">git init</span><br><span class=\"line\">git add README.md</span><br><span class=\"line\">git commit -m &quot;first commit&quot;</span><br><span class=\"line\">git remote add origin 你的git仓库地址</span><br><span class=\"line\">git push -u origin master</span><br><span class=\"line\"></span><br><span class=\"line\"># _config.yml文件中</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: 你的git仓库地址</span><br></pre></td></tr></table></figure>\n<p>使用第二种方法，如果你有域名的话，还可以将pages服务提供给你的域名做跳转，访问它的域名时跳转到你的域名，以coding为例。</p>\n<p><img src=\"https://img-qiniu.alwayslay.com/如何使本地可以写博客/20181229010924688.png\" alt=\"配置Pages服务\"></p>\n<ol>\n<li>进入你的域名解析管理页面，添加一条CNAME的记录</li>\n<li>在你hexo的项目source文件夹下新增一个文件CNAME，不要有后缀，然后进入编辑模式，将xxx.coding.me粘贴进去，保存退出</li>\n<li>本地试一下hexo g -d，看是否有向你的coding仓库推送。</li>\n</ol>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>拜拜！</p>"},{"title":"Laravel笔记","top":100,"keywords":["Laravel","Eloquent","Route"],"description":"记录平时工作中用到的一些解决问题的方法，Eloquent的操作与Route的操作","translate_title":"laravel-notes","date":"2019-01-11T06:12:00.000Z","_content":"\n记录一些平时工作中遇到的问题\n开发环境 Homestead：\n   php 7.2\n   laravel 5.5\n\n<!-- more -->\n\n### 1.路由绑定模型，但模型被软删除\n比如我们要查询\"/users/1\", 但是id为1的用户被软删除了，直接访问\"/users/1\"的时候会提示404，进行以下操作可以实现用户被软删除后还可以进行查询。\n```\n# routes/api.php\nRoute::get('users/{user}', 'UsersController@show')\n    ->name('api.users.show');\n\n# 在app/Providers/RouteServiceProvider.php中\npublic function boot() {\n    parent::boot();\n    \n    Route::bind('user', function ($value) {\n        // 只允许详情的查询接口显示被删除的用户的信息，不允许进行更新操作\n        if (Route::currentRouteName() == 'api.users.show') {\n            return \\App\\Models\\User::withTrashed()->find($value) ?? abort(404);\n        }\n\n        return \\App\\Models\\User::whereNull('deleted_at')->find($value) ?? abort(404);\n    });\n}\n```\n\n### 2.Eloquent-withCount\n需求：筛选出使用客户端播放音乐时长超过60分钟的门店。\n```\n# 用户表：stores 表关系：一对多\nclass Store extends Model {\n    ...\n    \n    public function clientPlayedLogs() {\n        return $this->hasMany(ClientPlayedLogs::class);\n    }\n}\n\n# 客户端播放日志表：client_played_logs 表关系：多对一\n$storesQuery = User::with(['clientPlayedLogs']);\n\n$storesQuery->withCount([\n    'clientPlayedLogs as client_played_logs_count' => function ($query) use ($startDate, $finishDate) {\n        $query->whereBetween('created_at', [$startDate, $finishDate]);\n    }\n]);\n\n# 注意 havingRow(sqlQuery, arrayParamerters)\n$storesQuery->havingRaw('client_played_logs_count / 60 > ?', [60]);\n\n# 还有一件事使用了having以后就不能使用paginate分页了，可以看下面这一节如何having后使用paginate\n```\n\n### having后如何使用paginate分页\n这个方法也是我在github上看到的，[github地址](https://github.com/justbetter/laravel-pagination-with-havings)，下面把他加入到我们的项目中。\n\n```\ncd 项目/app\nmkdir Traits && Traits\nmkdir PaginationWithHavings && cd PaginationWithHavings\ntouch BuilderWithPaginationHavingSupport.php && touch PaginationWithHavings.php\n\n# BuilderWithPaginationHavingSupport.php\n<?php\n\nnamespace App\\Traits\\PaginationWithHavings;\n\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Database\\Query\\Builder;\n\nclass BuilderWithPaginationHavingSupport extends Builder\n{\n    protected function runPaginationCountQuery($columns = ['*'])\n    {\n        if ($this->havings) {\n            $query = $this->cloneWithout(['orders', 'limit', 'offset'])\n                          ->cloneWithoutBindings(['order']);\n\n            foreach ($query->columns as $key => $value) {\n                if (is_string($value)) {\n                    unset($query->columns[$key]);\n                }\n            }\n\n            $countQuery = DB::table(DB::raw('('.$query->toSql().') as x'))->mergeBindings($query);\n\n            if (!$this->groups) {\n                $countQuery->setAggregate('count', $this->withoutSelectAliases($columns));\n            }\n\n            return $countQuery->get()->all();\n        }\n\n        return $this->cloneWithout(['columns', 'orders', 'limit', 'offset'])\n                    ->cloneWithoutBindings(['select', 'order'])\n                    ->setAggregate('count', $this->withoutSelectAliases($columns))\n                    ->get()->all();\n    }\n}\n\n# PaginationWithHavings\n<?php\n\nnamespace App\\Traits\\PaginationWithHavings;\n\ntrait PaginationWithHavings\n{\n    protected function newBaseQueryBuilder()\n    {\n        $connection = $this->getConnection();\n\n        return new BuilderWithPaginationHavingSupport(\n            $connection,\n            $connection->getQueryGrammar(),\n            $connection->getPostProcessor()\n        );\n    }\n}\n\n# app/Models/Store\n...\nuse App\\Traits\\PaginationWithHavings\\PaginationWithHavings;\n...\nclass Store extends Model {\n    use PaginationWithHavings;\n}\n\n# 这样就ok了，以后其他Model需要使用的时候就像Store这个类这样引用Trait就好了\n```\n\n### 最后\n后面有时间再慢慢更新","source":"_posts/Laravel笔记.md","raw":"---\ntitle: Laravel笔记\ntop: 100\nkeywords:\n  - Laravel\n  - Eloquent\n  - Route\ndescription: 记录平时工作中用到的一些解决问题的方法，Eloquent的操作与Route的操作\ntags:\n  - Laravel\n  - Eloquent\n  - Route\ncategories:\n  - Laravel\ntranslate_title: laravel-notes\ndate: 2019-01-11 14:12:00\n---\n\n记录一些平时工作中遇到的问题\n开发环境 Homestead：\n   php 7.2\n   laravel 5.5\n\n<!-- more -->\n\n### 1.路由绑定模型，但模型被软删除\n比如我们要查询\"/users/1\", 但是id为1的用户被软删除了，直接访问\"/users/1\"的时候会提示404，进行以下操作可以实现用户被软删除后还可以进行查询。\n```\n# routes/api.php\nRoute::get('users/{user}', 'UsersController@show')\n    ->name('api.users.show');\n\n# 在app/Providers/RouteServiceProvider.php中\npublic function boot() {\n    parent::boot();\n    \n    Route::bind('user', function ($value) {\n        // 只允许详情的查询接口显示被删除的用户的信息，不允许进行更新操作\n        if (Route::currentRouteName() == 'api.users.show') {\n            return \\App\\Models\\User::withTrashed()->find($value) ?? abort(404);\n        }\n\n        return \\App\\Models\\User::whereNull('deleted_at')->find($value) ?? abort(404);\n    });\n}\n```\n\n### 2.Eloquent-withCount\n需求：筛选出使用客户端播放音乐时长超过60分钟的门店。\n```\n# 用户表：stores 表关系：一对多\nclass Store extends Model {\n    ...\n    \n    public function clientPlayedLogs() {\n        return $this->hasMany(ClientPlayedLogs::class);\n    }\n}\n\n# 客户端播放日志表：client_played_logs 表关系：多对一\n$storesQuery = User::with(['clientPlayedLogs']);\n\n$storesQuery->withCount([\n    'clientPlayedLogs as client_played_logs_count' => function ($query) use ($startDate, $finishDate) {\n        $query->whereBetween('created_at', [$startDate, $finishDate]);\n    }\n]);\n\n# 注意 havingRow(sqlQuery, arrayParamerters)\n$storesQuery->havingRaw('client_played_logs_count / 60 > ?', [60]);\n\n# 还有一件事使用了having以后就不能使用paginate分页了，可以看下面这一节如何having后使用paginate\n```\n\n### having后如何使用paginate分页\n这个方法也是我在github上看到的，[github地址](https://github.com/justbetter/laravel-pagination-with-havings)，下面把他加入到我们的项目中。\n\n```\ncd 项目/app\nmkdir Traits && Traits\nmkdir PaginationWithHavings && cd PaginationWithHavings\ntouch BuilderWithPaginationHavingSupport.php && touch PaginationWithHavings.php\n\n# BuilderWithPaginationHavingSupport.php\n<?php\n\nnamespace App\\Traits\\PaginationWithHavings;\n\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Database\\Query\\Builder;\n\nclass BuilderWithPaginationHavingSupport extends Builder\n{\n    protected function runPaginationCountQuery($columns = ['*'])\n    {\n        if ($this->havings) {\n            $query = $this->cloneWithout(['orders', 'limit', 'offset'])\n                          ->cloneWithoutBindings(['order']);\n\n            foreach ($query->columns as $key => $value) {\n                if (is_string($value)) {\n                    unset($query->columns[$key]);\n                }\n            }\n\n            $countQuery = DB::table(DB::raw('('.$query->toSql().') as x'))->mergeBindings($query);\n\n            if (!$this->groups) {\n                $countQuery->setAggregate('count', $this->withoutSelectAliases($columns));\n            }\n\n            return $countQuery->get()->all();\n        }\n\n        return $this->cloneWithout(['columns', 'orders', 'limit', 'offset'])\n                    ->cloneWithoutBindings(['select', 'order'])\n                    ->setAggregate('count', $this->withoutSelectAliases($columns))\n                    ->get()->all();\n    }\n}\n\n# PaginationWithHavings\n<?php\n\nnamespace App\\Traits\\PaginationWithHavings;\n\ntrait PaginationWithHavings\n{\n    protected function newBaseQueryBuilder()\n    {\n        $connection = $this->getConnection();\n\n        return new BuilderWithPaginationHavingSupport(\n            $connection,\n            $connection->getQueryGrammar(),\n            $connection->getPostProcessor()\n        );\n    }\n}\n\n# app/Models/Store\n...\nuse App\\Traits\\PaginationWithHavings\\PaginationWithHavings;\n...\nclass Store extends Model {\n    use PaginationWithHavings;\n}\n\n# 这样就ok了，以后其他Model需要使用的时候就像Store这个类这样引用Trait就好了\n```\n\n### 最后\n后面有时间再慢慢更新","slug":"Laravel笔记","published":1,"updated":"2019-01-16T06:13:06.957Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqytnhp50006jygvyg83nk7d","content":"<p>记录一些平时工作中遇到的问题<br>开发环境 Homestead：<br>   php 7.2<br>   laravel 5.5</p>\n<a id=\"more\"></a>\n<h3 id=\"1-路由绑定模型，但模型被软删除\"><a href=\"#1-路由绑定模型，但模型被软删除\" class=\"headerlink\" title=\"1.路由绑定模型，但模型被软删除\"></a>1.路由绑定模型，但模型被软删除</h3><p>比如我们要查询”/users/1”, 但是id为1的用户被软删除了，直接访问”/users/1”的时候会提示404，进行以下操作可以实现用户被软删除后还可以进行查询。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># routes/api.php</span><br><span class=\"line\">Route::get(&apos;users/&#123;user&#125;&apos;, &apos;UsersController@show&apos;)</span><br><span class=\"line\">    -&gt;name(&apos;api.users.show&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\"># 在app/Providers/RouteServiceProvider.php中</span><br><span class=\"line\">public function boot() &#123;</span><br><span class=\"line\">    parent::boot();</span><br><span class=\"line\">    </span><br><span class=\"line\">    Route::bind(&apos;user&apos;, function ($value) &#123;</span><br><span class=\"line\">        // 只允许详情的查询接口显示被删除的用户的信息，不允许进行更新操作</span><br><span class=\"line\">        if (Route::currentRouteName() == &apos;api.users.show&apos;) &#123;</span><br><span class=\"line\">            return \\App\\Models\\User::withTrashed()-&gt;find($value) ?? abort(404);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return \\App\\Models\\User::whereNull(&apos;deleted_at&apos;)-&gt;find($value) ?? abort(404);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-Eloquent-withCount\"><a href=\"#2-Eloquent-withCount\" class=\"headerlink\" title=\"2.Eloquent-withCount\"></a>2.Eloquent-withCount</h3><p>需求：筛选出使用客户端播放音乐时长超过60分钟的门店。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 用户表：stores 表关系：一对多</span><br><span class=\"line\">class Store extends Model &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    </span><br><span class=\"line\">    public function clientPlayedLogs() &#123;</span><br><span class=\"line\">        return $this-&gt;hasMany(ClientPlayedLogs::class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># 客户端播放日志表：client_played_logs 表关系：多对一</span><br><span class=\"line\">$storesQuery = User::with([&apos;clientPlayedLogs&apos;]);</span><br><span class=\"line\"></span><br><span class=\"line\">$storesQuery-&gt;withCount([</span><br><span class=\"line\">    &apos;clientPlayedLogs as client_played_logs_count&apos; =&gt; function ($query) use ($startDate, $finishDate) &#123;</span><br><span class=\"line\">        $query-&gt;whereBetween(&apos;created_at&apos;, [$startDate, $finishDate]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]);</span><br><span class=\"line\"></span><br><span class=\"line\"># 注意 havingRow(sqlQuery, arrayParamerters)</span><br><span class=\"line\">$storesQuery-&gt;havingRaw(&apos;client_played_logs_count / 60 &gt; ?&apos;, [60]);</span><br><span class=\"line\"></span><br><span class=\"line\"># 还有一件事使用了having以后就不能使用paginate分页了，可以看下面这一节如何having后使用paginate</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"having后如何使用paginate分页\"><a href=\"#having后如何使用paginate分页\" class=\"headerlink\" title=\"having后如何使用paginate分页\"></a>having后如何使用paginate分页</h3><p>这个方法也是我在github上看到的，<a href=\"https://github.com/justbetter/laravel-pagination-with-havings\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">github地址</a>，下面把他加入到我们的项目中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd 项目/app</span><br><span class=\"line\">mkdir Traits &amp;&amp; Traits</span><br><span class=\"line\">mkdir PaginationWithHavings &amp;&amp; cd PaginationWithHavings</span><br><span class=\"line\">touch BuilderWithPaginationHavingSupport.php &amp;&amp; touch PaginationWithHavings.php</span><br><span class=\"line\"></span><br><span class=\"line\"># BuilderWithPaginationHavingSupport.php</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">namespace App\\Traits\\PaginationWithHavings;</span><br><span class=\"line\"></span><br><span class=\"line\">use Illuminate\\Support\\Facades\\DB;</span><br><span class=\"line\">use Illuminate\\Database\\Query\\Builder;</span><br><span class=\"line\"></span><br><span class=\"line\">class BuilderWithPaginationHavingSupport extends Builder</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    protected function runPaginationCountQuery($columns = [&apos;*&apos;])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if ($this-&gt;havings) &#123;</span><br><span class=\"line\">            $query = $this-&gt;cloneWithout([&apos;orders&apos;, &apos;limit&apos;, &apos;offset&apos;])</span><br><span class=\"line\">                          -&gt;cloneWithoutBindings([&apos;order&apos;]);</span><br><span class=\"line\"></span><br><span class=\"line\">            foreach ($query-&gt;columns as $key =&gt; $value) &#123;</span><br><span class=\"line\">                if (is_string($value)) &#123;</span><br><span class=\"line\">                    unset($query-&gt;columns[$key]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            $countQuery = DB::table(DB::raw(&apos;(&apos;.$query-&gt;toSql().&apos;) as x&apos;))-&gt;mergeBindings($query);</span><br><span class=\"line\"></span><br><span class=\"line\">            if (!$this-&gt;groups) &#123;</span><br><span class=\"line\">                $countQuery-&gt;setAggregate(&apos;count&apos;, $this-&gt;withoutSelectAliases($columns));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            return $countQuery-&gt;get()-&gt;all();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return $this-&gt;cloneWithout([&apos;columns&apos;, &apos;orders&apos;, &apos;limit&apos;, &apos;offset&apos;])</span><br><span class=\"line\">                    -&gt;cloneWithoutBindings([&apos;select&apos;, &apos;order&apos;])</span><br><span class=\"line\">                    -&gt;setAggregate(&apos;count&apos;, $this-&gt;withoutSelectAliases($columns))</span><br><span class=\"line\">                    -&gt;get()-&gt;all();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># PaginationWithHavings</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">namespace App\\Traits\\PaginationWithHavings;</span><br><span class=\"line\"></span><br><span class=\"line\">trait PaginationWithHavings</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    protected function newBaseQueryBuilder()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $connection = $this-&gt;getConnection();</span><br><span class=\"line\"></span><br><span class=\"line\">        return new BuilderWithPaginationHavingSupport(</span><br><span class=\"line\">            $connection,</span><br><span class=\"line\">            $connection-&gt;getQueryGrammar(),</span><br><span class=\"line\">            $connection-&gt;getPostProcessor()</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># app/Models/Store</span><br><span class=\"line\">...</span><br><span class=\"line\">use App\\Traits\\PaginationWithHavings\\PaginationWithHavings;</span><br><span class=\"line\">...</span><br><span class=\"line\">class Store extends Model &#123;</span><br><span class=\"line\">    use PaginationWithHavings;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># 这样就ok了，以后其他Model需要使用的时候就像Store这个类这样引用Trait就好了</span><br></pre></td></tr></table></figure>\n<h3 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h3><p>后面有时间再慢慢更新</p>\n","site":{"data":{}},"excerpt":"<p>记录一些平时工作中遇到的问题<br>开发环境 Homestead：<br>   php 7.2<br>   laravel 5.5</p>","more":"<h3 id=\"1-路由绑定模型，但模型被软删除\"><a href=\"#1-路由绑定模型，但模型被软删除\" class=\"headerlink\" title=\"1.路由绑定模型，但模型被软删除\"></a>1.路由绑定模型，但模型被软删除</h3><p>比如我们要查询”/users/1”, 但是id为1的用户被软删除了，直接访问”/users/1”的时候会提示404，进行以下操作可以实现用户被软删除后还可以进行查询。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># routes/api.php</span><br><span class=\"line\">Route::get(&apos;users/&#123;user&#125;&apos;, &apos;UsersController@show&apos;)</span><br><span class=\"line\">    -&gt;name(&apos;api.users.show&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\"># 在app/Providers/RouteServiceProvider.php中</span><br><span class=\"line\">public function boot() &#123;</span><br><span class=\"line\">    parent::boot();</span><br><span class=\"line\">    </span><br><span class=\"line\">    Route::bind(&apos;user&apos;, function ($value) &#123;</span><br><span class=\"line\">        // 只允许详情的查询接口显示被删除的用户的信息，不允许进行更新操作</span><br><span class=\"line\">        if (Route::currentRouteName() == &apos;api.users.show&apos;) &#123;</span><br><span class=\"line\">            return \\App\\Models\\User::withTrashed()-&gt;find($value) ?? abort(404);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return \\App\\Models\\User::whereNull(&apos;deleted_at&apos;)-&gt;find($value) ?? abort(404);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-Eloquent-withCount\"><a href=\"#2-Eloquent-withCount\" class=\"headerlink\" title=\"2.Eloquent-withCount\"></a>2.Eloquent-withCount</h3><p>需求：筛选出使用客户端播放音乐时长超过60分钟的门店。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 用户表：stores 表关系：一对多</span><br><span class=\"line\">class Store extends Model &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    </span><br><span class=\"line\">    public function clientPlayedLogs() &#123;</span><br><span class=\"line\">        return $this-&gt;hasMany(ClientPlayedLogs::class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># 客户端播放日志表：client_played_logs 表关系：多对一</span><br><span class=\"line\">$storesQuery = User::with([&apos;clientPlayedLogs&apos;]);</span><br><span class=\"line\"></span><br><span class=\"line\">$storesQuery-&gt;withCount([</span><br><span class=\"line\">    &apos;clientPlayedLogs as client_played_logs_count&apos; =&gt; function ($query) use ($startDate, $finishDate) &#123;</span><br><span class=\"line\">        $query-&gt;whereBetween(&apos;created_at&apos;, [$startDate, $finishDate]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]);</span><br><span class=\"line\"></span><br><span class=\"line\"># 注意 havingRow(sqlQuery, arrayParamerters)</span><br><span class=\"line\">$storesQuery-&gt;havingRaw(&apos;client_played_logs_count / 60 &gt; ?&apos;, [60]);</span><br><span class=\"line\"></span><br><span class=\"line\"># 还有一件事使用了having以后就不能使用paginate分页了，可以看下面这一节如何having后使用paginate</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"having后如何使用paginate分页\"><a href=\"#having后如何使用paginate分页\" class=\"headerlink\" title=\"having后如何使用paginate分页\"></a>having后如何使用paginate分页</h3><p>这个方法也是我在github上看到的，<a href=\"https://github.com/justbetter/laravel-pagination-with-havings\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">github地址</a>，下面把他加入到我们的项目中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd 项目/app</span><br><span class=\"line\">mkdir Traits &amp;&amp; Traits</span><br><span class=\"line\">mkdir PaginationWithHavings &amp;&amp; cd PaginationWithHavings</span><br><span class=\"line\">touch BuilderWithPaginationHavingSupport.php &amp;&amp; touch PaginationWithHavings.php</span><br><span class=\"line\"></span><br><span class=\"line\"># BuilderWithPaginationHavingSupport.php</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">namespace App\\Traits\\PaginationWithHavings;</span><br><span class=\"line\"></span><br><span class=\"line\">use Illuminate\\Support\\Facades\\DB;</span><br><span class=\"line\">use Illuminate\\Database\\Query\\Builder;</span><br><span class=\"line\"></span><br><span class=\"line\">class BuilderWithPaginationHavingSupport extends Builder</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    protected function runPaginationCountQuery($columns = [&apos;*&apos;])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if ($this-&gt;havings) &#123;</span><br><span class=\"line\">            $query = $this-&gt;cloneWithout([&apos;orders&apos;, &apos;limit&apos;, &apos;offset&apos;])</span><br><span class=\"line\">                          -&gt;cloneWithoutBindings([&apos;order&apos;]);</span><br><span class=\"line\"></span><br><span class=\"line\">            foreach ($query-&gt;columns as $key =&gt; $value) &#123;</span><br><span class=\"line\">                if (is_string($value)) &#123;</span><br><span class=\"line\">                    unset($query-&gt;columns[$key]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            $countQuery = DB::table(DB::raw(&apos;(&apos;.$query-&gt;toSql().&apos;) as x&apos;))-&gt;mergeBindings($query);</span><br><span class=\"line\"></span><br><span class=\"line\">            if (!$this-&gt;groups) &#123;</span><br><span class=\"line\">                $countQuery-&gt;setAggregate(&apos;count&apos;, $this-&gt;withoutSelectAliases($columns));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            return $countQuery-&gt;get()-&gt;all();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return $this-&gt;cloneWithout([&apos;columns&apos;, &apos;orders&apos;, &apos;limit&apos;, &apos;offset&apos;])</span><br><span class=\"line\">                    -&gt;cloneWithoutBindings([&apos;select&apos;, &apos;order&apos;])</span><br><span class=\"line\">                    -&gt;setAggregate(&apos;count&apos;, $this-&gt;withoutSelectAliases($columns))</span><br><span class=\"line\">                    -&gt;get()-&gt;all();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># PaginationWithHavings</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">namespace App\\Traits\\PaginationWithHavings;</span><br><span class=\"line\"></span><br><span class=\"line\">trait PaginationWithHavings</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    protected function newBaseQueryBuilder()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $connection = $this-&gt;getConnection();</span><br><span class=\"line\"></span><br><span class=\"line\">        return new BuilderWithPaginationHavingSupport(</span><br><span class=\"line\">            $connection,</span><br><span class=\"line\">            $connection-&gt;getQueryGrammar(),</span><br><span class=\"line\">            $connection-&gt;getPostProcessor()</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># app/Models/Store</span><br><span class=\"line\">...</span><br><span class=\"line\">use App\\Traits\\PaginationWithHavings\\PaginationWithHavings;</span><br><span class=\"line\">...</span><br><span class=\"line\">class Store extends Model &#123;</span><br><span class=\"line\">    use PaginationWithHavings;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># 这样就ok了，以后其他Model需要使用的时候就像Store这个类这样引用Trait就好了</span><br></pre></td></tr></table></figure>\n<h3 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h3><p>后面有时间再慢慢更新</p>"},{"title":"seo站点优化","top":0,"translate_title":"seo-site-optimization","date":"2018-12-27T15:42:30.000Z","keywords":["seo","hexo","seo优化"],"description":"seo优化，seo站点优化，翻译url并修改访问地址，添加nofollow属性。","_content":"\nseo站点优化主要是为了让百度爬虫可以爬到我们的网站，增加权重，让我们的网站排名靠前。\n尽可能对每片文章添加keywords、description的描述，可以增加网站的权重。\n\n<!-- more -->\n\n## 添加sitemap\n> 首先对你的文章生成sitemap\n\n```\nnpm install hexo-generator-sitemap --save #sitemap.xml适合提交给谷歌搜素引擎\nnpm install hexo-generator-baidu-sitemap --save #baidusitemap.xml适合提交百度搜索引擎\n```\n\n> 站点_config.yml文件中添加一下代码\n\n```\n# 自动生成sitemap\nsitemap:\n  path: sitemap.xml\nbaidusitemap:\n  path: baidusitemap.xml\n```\n\n> 最后修改站点配置文件_config.yml\n\n```\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: https://域名.com\n```\n\n## 优化访问地址\nhexo站点的默认访问地址为：sitename/year/mounth/day/title\n但是这样四层url结构不利于seo，爬虫将会爬不到我们的文章，所以我们可以将url改为：sitename/title.html\n\n```\nurl: http://你的网站\nroot: /\npermalink: :title.html\npermalink_defaults:\n```\n\n但是我们现在这样还是不利于爬虫的爬去文章，因为我们的title是中文的，接下来我们要把url上的中文标题进行翻译。\n\n---\n\n> 首先我们进行安装翻译插件\n\n```\nnpm install hexo-translate-title --save\n```\n\n> 配置站点的_config.yml\n> 这里推荐使用baidu_with_appid，google经常会翻译不出来，造成undifined.html\n> 正常情况下 google > baidu > youdao\n\n```\ntranslate_title:\n  translate_way: google # google,youdao,baidu_with_appid,baidu_no_appid\n  is_need_proxy: false   # true | false 是否使用代理\n  # proxy_url: http://localhost:50018 # 你的代理地址\n  # youdao_api_key: '' # 你的 youdao_api_key\n  # youdao_keyfrom: xxxx-blog # 你的 youdao_keyfrom\n  # baidu_appid: '' # 你的 baidu_appid\n  # baidu_appkey: '' # 你的 baidu_appkey\n```\n\n> 我们再回过头将_config.yml中的permalink进行修改\n\n```\n# 将url换为翻译过的标题\npermalink: :translate_title.html\n```\n\n## nofollow\nnofollow标签的作用就是让搜索引擎不要抓去网页上带有nofollow属性的出站链接，目的是减少这些出站分散我们网站的权重\n\n> 安装nofollow插件，自动对出站链接添加nofollow属性，有效阻止权重分散\n\n```\nnpm install hexo-autonofollow --save\n```\n\n> 配置_config.yml, 开启nofollow，对以下链接不添加nofollow属性\n\n```\nnofollow:\n    enable: true\n    exclude:\n    - www.xxx.com\n```\n\n## 最后\n拜拜！\n","source":"_posts/seo站点优化.md","raw":"---\ntitle: seo站点优化\ntop: 0\ntags:\n  - seo\n  - translat\ncategories:\n  - 前端\ntranslate_title: seo-site-optimization\ndate: 2018-12-27 23:42:30\nkeywords: [seo, hexo, seo优化]\ndescription: seo优化，seo站点优化，翻译url并修改访问地址，添加nofollow属性。\n---\n\nseo站点优化主要是为了让百度爬虫可以爬到我们的网站，增加权重，让我们的网站排名靠前。\n尽可能对每片文章添加keywords、description的描述，可以增加网站的权重。\n\n<!-- more -->\n\n## 添加sitemap\n> 首先对你的文章生成sitemap\n\n```\nnpm install hexo-generator-sitemap --save #sitemap.xml适合提交给谷歌搜素引擎\nnpm install hexo-generator-baidu-sitemap --save #baidusitemap.xml适合提交百度搜索引擎\n```\n\n> 站点_config.yml文件中添加一下代码\n\n```\n# 自动生成sitemap\nsitemap:\n  path: sitemap.xml\nbaidusitemap:\n  path: baidusitemap.xml\n```\n\n> 最后修改站点配置文件_config.yml\n\n```\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: https://域名.com\n```\n\n## 优化访问地址\nhexo站点的默认访问地址为：sitename/year/mounth/day/title\n但是这样四层url结构不利于seo，爬虫将会爬不到我们的文章，所以我们可以将url改为：sitename/title.html\n\n```\nurl: http://你的网站\nroot: /\npermalink: :title.html\npermalink_defaults:\n```\n\n但是我们现在这样还是不利于爬虫的爬去文章，因为我们的title是中文的，接下来我们要把url上的中文标题进行翻译。\n\n---\n\n> 首先我们进行安装翻译插件\n\n```\nnpm install hexo-translate-title --save\n```\n\n> 配置站点的_config.yml\n> 这里推荐使用baidu_with_appid，google经常会翻译不出来，造成undifined.html\n> 正常情况下 google > baidu > youdao\n\n```\ntranslate_title:\n  translate_way: google # google,youdao,baidu_with_appid,baidu_no_appid\n  is_need_proxy: false   # true | false 是否使用代理\n  # proxy_url: http://localhost:50018 # 你的代理地址\n  # youdao_api_key: '' # 你的 youdao_api_key\n  # youdao_keyfrom: xxxx-blog # 你的 youdao_keyfrom\n  # baidu_appid: '' # 你的 baidu_appid\n  # baidu_appkey: '' # 你的 baidu_appkey\n```\n\n> 我们再回过头将_config.yml中的permalink进行修改\n\n```\n# 将url换为翻译过的标题\npermalink: :translate_title.html\n```\n\n## nofollow\nnofollow标签的作用就是让搜索引擎不要抓去网页上带有nofollow属性的出站链接，目的是减少这些出站分散我们网站的权重\n\n> 安装nofollow插件，自动对出站链接添加nofollow属性，有效阻止权重分散\n\n```\nnpm install hexo-autonofollow --save\n```\n\n> 配置_config.yml, 开启nofollow，对以下链接不添加nofollow属性\n\n```\nnofollow:\n    enable: true\n    exclude:\n    - www.xxx.com\n```\n\n## 最后\n拜拜！\n","slug":"seo站点优化","published":1,"updated":"2018-12-29T04:10:04.156Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqytnhp60007jygvnnn9gpjt","content":"<p>seo站点优化主要是为了让百度爬虫可以爬到我们的网站，增加权重，让我们的网站排名靠前。<br>尽可能对每片文章添加keywords、description的描述，可以增加网站的权重。</p>\n<a id=\"more\"></a>\n<h2 id=\"添加sitemap\"><a href=\"#添加sitemap\" class=\"headerlink\" title=\"添加sitemap\"></a>添加sitemap</h2><blockquote>\n<p>首先对你的文章生成sitemap</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-sitemap --save #sitemap.xml适合提交给谷歌搜素引擎</span><br><span class=\"line\">npm install hexo-generator-baidu-sitemap --save #baidusitemap.xml适合提交百度搜索引擎</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>站点_config.yml文件中添加一下代码</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 自动生成sitemap</span><br><span class=\"line\">sitemap:</span><br><span class=\"line\">  path: sitemap.xml</span><br><span class=\"line\">baidusitemap:</span><br><span class=\"line\">  path: baidusitemap.xml</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>最后修改站点配置文件_config.yml</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># URL</span><br><span class=\"line\">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</span><br><span class=\"line\">url: https://域名.com</span><br></pre></td></tr></table></figure>\n<h2 id=\"优化访问地址\"><a href=\"#优化访问地址\" class=\"headerlink\" title=\"优化访问地址\"></a>优化访问地址</h2><p>hexo站点的默认访问地址为：sitename/year/mounth/day/title<br>但是这样四层url结构不利于seo，爬虫将会爬不到我们的文章，所以我们可以将url改为：sitename/title.html</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url: http://你的网站</span><br><span class=\"line\">root: /</span><br><span class=\"line\">permalink: :title.html</span><br><span class=\"line\">permalink_defaults:</span><br></pre></td></tr></table></figure>\n<p>但是我们现在这样还是不利于爬虫的爬去文章，因为我们的title是中文的，接下来我们要把url上的中文标题进行翻译。</p>\n<hr>\n<blockquote>\n<p>首先我们进行安装翻译插件</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-translate-title --save</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>配置站点的_config.yml<br>这里推荐使用baidu_with_appid，google经常会翻译不出来，造成undifined.html<br>正常情况下 google &gt; baidu &gt; youdao</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">translate_title:</span><br><span class=\"line\">  translate_way: google # google,youdao,baidu_with_appid,baidu_no_appid</span><br><span class=\"line\">  is_need_proxy: false   # true | false 是否使用代理</span><br><span class=\"line\">  # proxy_url: http://localhost:50018 # 你的代理地址</span><br><span class=\"line\">  # youdao_api_key: &apos;&apos; # 你的 youdao_api_key</span><br><span class=\"line\">  # youdao_keyfrom: xxxx-blog # 你的 youdao_keyfrom</span><br><span class=\"line\">  # baidu_appid: &apos;&apos; # 你的 baidu_appid</span><br><span class=\"line\">  # baidu_appkey: &apos;&apos; # 你的 baidu_appkey</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>我们再回过头将_config.yml中的permalink进行修改</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 将url换为翻译过的标题</span><br><span class=\"line\">permalink: :translate_title.html</span><br></pre></td></tr></table></figure>\n<h2 id=\"nofollow\"><a href=\"#nofollow\" class=\"headerlink\" title=\"nofollow\"></a>nofollow</h2><p>nofollow标签的作用就是让搜索引擎不要抓去网页上带有nofollow属性的出站链接，目的是减少这些出站分散我们网站的权重</p>\n<blockquote>\n<p>安装nofollow插件，自动对出站链接添加nofollow属性，有效阻止权重分散</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-autonofollow --save</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>配置_config.yml, 开启nofollow，对以下链接不添加nofollow属性</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nofollow:</span><br><span class=\"line\">    enable: true</span><br><span class=\"line\">    exclude:</span><br><span class=\"line\">    - www.xxx.com</span><br></pre></td></tr></table></figure>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>拜拜！</p>\n","site":{"data":{}},"excerpt":"<p>seo站点优化主要是为了让百度爬虫可以爬到我们的网站，增加权重，让我们的网站排名靠前。<br>尽可能对每片文章添加keywords、description的描述，可以增加网站的权重。</p>","more":"<h2 id=\"添加sitemap\"><a href=\"#添加sitemap\" class=\"headerlink\" title=\"添加sitemap\"></a>添加sitemap</h2><blockquote>\n<p>首先对你的文章生成sitemap</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-sitemap --save #sitemap.xml适合提交给谷歌搜素引擎</span><br><span class=\"line\">npm install hexo-generator-baidu-sitemap --save #baidusitemap.xml适合提交百度搜索引擎</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>站点_config.yml文件中添加一下代码</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 自动生成sitemap</span><br><span class=\"line\">sitemap:</span><br><span class=\"line\">  path: sitemap.xml</span><br><span class=\"line\">baidusitemap:</span><br><span class=\"line\">  path: baidusitemap.xml</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>最后修改站点配置文件_config.yml</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># URL</span><br><span class=\"line\">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</span><br><span class=\"line\">url: https://域名.com</span><br></pre></td></tr></table></figure>\n<h2 id=\"优化访问地址\"><a href=\"#优化访问地址\" class=\"headerlink\" title=\"优化访问地址\"></a>优化访问地址</h2><p>hexo站点的默认访问地址为：sitename/year/mounth/day/title<br>但是这样四层url结构不利于seo，爬虫将会爬不到我们的文章，所以我们可以将url改为：sitename/title.html</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url: http://你的网站</span><br><span class=\"line\">root: /</span><br><span class=\"line\">permalink: :title.html</span><br><span class=\"line\">permalink_defaults:</span><br></pre></td></tr></table></figure>\n<p>但是我们现在这样还是不利于爬虫的爬去文章，因为我们的title是中文的，接下来我们要把url上的中文标题进行翻译。</p>\n<hr>\n<blockquote>\n<p>首先我们进行安装翻译插件</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-translate-title --save</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>配置站点的_config.yml<br>这里推荐使用baidu_with_appid，google经常会翻译不出来，造成undifined.html<br>正常情况下 google &gt; baidu &gt; youdao</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">translate_title:</span><br><span class=\"line\">  translate_way: google # google,youdao,baidu_with_appid,baidu_no_appid</span><br><span class=\"line\">  is_need_proxy: false   # true | false 是否使用代理</span><br><span class=\"line\">  # proxy_url: http://localhost:50018 # 你的代理地址</span><br><span class=\"line\">  # youdao_api_key: &apos;&apos; # 你的 youdao_api_key</span><br><span class=\"line\">  # youdao_keyfrom: xxxx-blog # 你的 youdao_keyfrom</span><br><span class=\"line\">  # baidu_appid: &apos;&apos; # 你的 baidu_appid</span><br><span class=\"line\">  # baidu_appkey: &apos;&apos; # 你的 baidu_appkey</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>我们再回过头将_config.yml中的permalink进行修改</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 将url换为翻译过的标题</span><br><span class=\"line\">permalink: :translate_title.html</span><br></pre></td></tr></table></figure>\n<h2 id=\"nofollow\"><a href=\"#nofollow\" class=\"headerlink\" title=\"nofollow\"></a>nofollow</h2><p>nofollow标签的作用就是让搜索引擎不要抓去网页上带有nofollow属性的出站链接，目的是减少这些出站分散我们网站的权重</p>\n<blockquote>\n<p>安装nofollow插件，自动对出站链接添加nofollow属性，有效阻止权重分散</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-autonofollow --save</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>配置_config.yml, 开启nofollow，对以下链接不添加nofollow属性</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nofollow:</span><br><span class=\"line\">    enable: true</span><br><span class=\"line\">    exclude:</span><br><span class=\"line\">    - www.xxx.com</span><br></pre></td></tr></table></figure>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>拜拜！</p>"},{"title":"晚安世界，又是一个研究博客的夜晚","top":0,"translate_title":"good-night-world,-another-night-of-blogging-research","date":"2018-12-24T16:30:00.000Z","_content":"\n这个hexo已经研究了一个星期了，终于初步成型。\n测试一下分类，这是根据Archive的页面修改的，这个作者没有做这个页面，努力修改了一下。\n\n<!-- more -->\n\n## 剩余的优化\n\n1. hexo的后台---目前应该差不多了(2018-12-27 已经完成)\n2. 手机端在微信访问会有一条横线（太难了，2018-12-29留）\n3. 分类的访问，目前达不到点击分类名称进行筛选(2018-12-27 已经完成)\n4. 目前需要分类的列表，看是否能将分类改为折叠\n\n\n","source":"_posts/晚安世界，又是一个研究博客的夜晚.md","raw":"---\ntitle: 晚安世界，又是一个研究博客的夜晚\ntop: 0\ncategories:\n  - 打卡\ntags:\n  - 凌晨\ntranslate_title: 'good-night-world,-another-night-of-blogging-research'\ndate: 2018-12-25 00:30:00\n---\n\n这个hexo已经研究了一个星期了，终于初步成型。\n测试一下分类，这是根据Archive的页面修改的，这个作者没有做这个页面，努力修改了一下。\n\n<!-- more -->\n\n## 剩余的优化\n\n1. hexo的后台---目前应该差不多了(2018-12-27 已经完成)\n2. 手机端在微信访问会有一条横线（太难了，2018-12-29留）\n3. 分类的访问，目前达不到点击分类名称进行筛选(2018-12-27 已经完成)\n4. 目前需要分类的列表，看是否能将分类改为折叠\n\n\n","slug":"晚安世界，又是一个研究博客的夜晚","published":1,"updated":"2018-12-29T04:10:19.516Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqytnhp80008jygvc4z18f1h","content":"<p>这个hexo已经研究了一个星期了，终于初步成型。<br>测试一下分类，这是根据Archive的页面修改的，这个作者没有做这个页面，努力修改了一下。</p>\n<a id=\"more\"></a>\n<h2 id=\"剩余的优化\"><a href=\"#剩余的优化\" class=\"headerlink\" title=\"剩余的优化\"></a>剩余的优化</h2><ol>\n<li>hexo的后台—目前应该差不多了(2018-12-27 已经完成)</li>\n<li>手机端在微信访问会有一条横线（太难了，2018-12-29留）</li>\n<li>分类的访问，目前达不到点击分类名称进行筛选(2018-12-27 已经完成)</li>\n<li>目前需要分类的列表，看是否能将分类改为折叠</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>这个hexo已经研究了一个星期了，终于初步成型。<br>测试一下分类，这是根据Archive的页面修改的，这个作者没有做这个页面，努力修改了一下。</p>","more":"<h2 id=\"剩余的优化\"><a href=\"#剩余的优化\" class=\"headerlink\" title=\"剩余的优化\"></a>剩余的优化</h2><ol>\n<li>hexo的后台—目前应该差不多了(2018-12-27 已经完成)</li>\n<li>手机端在微信访问会有一条横线（太难了，2018-12-29留）</li>\n<li>分类的访问，目前达不到点击分类名称进行筛选(2018-12-27 已经完成)</li>\n<li>目前需要分类的列表，看是否能将分类改为折叠</li>\n</ol>"},{"title":"如何申请SSL证书，让Google浏览器访问网站带安全锁","keywords":["SSL","https","nignx","部署https","nginx SSL"],"description":"如何申请SSL，将服务器改为https，nginx如何部署ssl","top":0,"translate_title":"how-to-apply-for-ssl-certificate-and-let-google-browser-access-website-with-security-lock","date":"2018-12-28T16:05:47.000Z","_content":"\n目前市面上有很多免费可用的SSL证书，单个子域名免费一年，以下是链接。\n但是可以多次申请。\n\n<!-- more -->\n\n[阿里云](https://common-buy.aliyun.com/?spm=5176.7968328.1266638..77cb1232rCOaQV&commodityCode=cas#/buy)\n[百度云](https://cloud.baidu.com/product/ssl.html)\n[腾讯云](https://buy.cloud.tencent.com/ssl?fromSource=trustasiassl)\n[七牛云](https://portal.qiniu.com/certificate/apply?ref=www.qiniu.com)\n\n## 进行购买\n\n> 选择Symantec 免费型DV SSL\n\n![购买证书服务](https://img-qiniu.alwayslay.com/如何申请SSL证书，让Google浏览器访问网站带安全锁/20181229121524488.png)\n\n> 跳过上面付款的步骤，开始证书申请\n\n![申请证书](https://img-qiniu.alwayslay.com/如何申请SSL证书，让Google浏览器访问网站带安全锁/20181229121842103.png)\n\n\n1. 输入证书绑定域名，因为我们买的是单域名版，所以只能填写blog.alwayslay.com这种子域名\n2. 验证方式，因为我的域名不在阿里云，所以选择手工DNS验证，不推荐使用文件验证，太麻烦了。\n\n\n![验证配置信息](https://img-qiniu.alwayslay.com/如何申请SSL证书，让Google浏览器访问网站带安全锁/20181229122634660.png)\n\n> 接下来进入你的域名解析界面\n\n![添加域名解析记录](https://img-qiniu.alwayslay.com/如何申请SSL证书，让Google浏览器访问网站带安全锁/20181229122944873.png)\n\n![点击验证-》提交审核](https://img-qiniu.alwayslay.com/如何申请SSL证书，让Google浏览器访问网站带安全锁/20181229123047478.png)\n\n点击提交审核后耐心等待把，一般1个工作日内就会通知通过的。\n\n## nignx配置\n对nginx其他的配置就不多写了，只贴SSL相关的配置的代码。\n首先将SSL证书文件上传至服务器\n```\nserver\n{\n    listen 80;\n    listen 443 ssl http2;\n    server_name 你的域名;\n    index index.html;\n    root 项目存放地址;\n\n    ssl_certificate /证书存放地址/证书名称.pem;\n    ssl_certificate_key /证书存放地址/证书密钥名称.key;\n}\n```\n至此服务器的配置结束了，进入下一环节\n\n## 网站配置\n我们将nginx配置好以后，访问我们的网站虽然是https了，但是可能还是有红色不安全的标记，这个是因为我们项目中还存在着其他http链接的图片、css、js等，将这些链接替换为https，在刷新你的网站就会有安全锁了。\n\n## 最后\n拜拜！","source":"_posts/如何申请SSL证书，让Google浏览器访问网站带安全锁.md","raw":"---\ntitle: 如何申请SSL证书，让Google浏览器访问网站带安全锁\nkeywords:\n  - SSL\n  - https\n  - nignx\n  - 部署https\n  - nginx SSL\ndescription: 如何申请SSL，将服务器改为https，nginx如何部署ssl\ntop: 0\ntags:\n  - SSL\n  - https\n  - nignx\ncategories:\n  - 服务器\ntranslate_title: >-\n  how-to-apply-for-ssl-certificate-and-let-google-browser-access-website-with-security-lock\ndate: 2018-12-29 00:05:47\n---\n\n目前市面上有很多免费可用的SSL证书，单个子域名免费一年，以下是链接。\n但是可以多次申请。\n\n<!-- more -->\n\n[阿里云](https://common-buy.aliyun.com/?spm=5176.7968328.1266638..77cb1232rCOaQV&commodityCode=cas#/buy)\n[百度云](https://cloud.baidu.com/product/ssl.html)\n[腾讯云](https://buy.cloud.tencent.com/ssl?fromSource=trustasiassl)\n[七牛云](https://portal.qiniu.com/certificate/apply?ref=www.qiniu.com)\n\n## 进行购买\n\n> 选择Symantec 免费型DV SSL\n\n![购买证书服务](https://img-qiniu.alwayslay.com/如何申请SSL证书，让Google浏览器访问网站带安全锁/20181229121524488.png)\n\n> 跳过上面付款的步骤，开始证书申请\n\n![申请证书](https://img-qiniu.alwayslay.com/如何申请SSL证书，让Google浏览器访问网站带安全锁/20181229121842103.png)\n\n\n1. 输入证书绑定域名，因为我们买的是单域名版，所以只能填写blog.alwayslay.com这种子域名\n2. 验证方式，因为我的域名不在阿里云，所以选择手工DNS验证，不推荐使用文件验证，太麻烦了。\n\n\n![验证配置信息](https://img-qiniu.alwayslay.com/如何申请SSL证书，让Google浏览器访问网站带安全锁/20181229122634660.png)\n\n> 接下来进入你的域名解析界面\n\n![添加域名解析记录](https://img-qiniu.alwayslay.com/如何申请SSL证书，让Google浏览器访问网站带安全锁/20181229122944873.png)\n\n![点击验证-》提交审核](https://img-qiniu.alwayslay.com/如何申请SSL证书，让Google浏览器访问网站带安全锁/20181229123047478.png)\n\n点击提交审核后耐心等待把，一般1个工作日内就会通知通过的。\n\n## nignx配置\n对nginx其他的配置就不多写了，只贴SSL相关的配置的代码。\n首先将SSL证书文件上传至服务器\n```\nserver\n{\n    listen 80;\n    listen 443 ssl http2;\n    server_name 你的域名;\n    index index.html;\n    root 项目存放地址;\n\n    ssl_certificate /证书存放地址/证书名称.pem;\n    ssl_certificate_key /证书存放地址/证书密钥名称.key;\n}\n```\n至此服务器的配置结束了，进入下一环节\n\n## 网站配置\n我们将nginx配置好以后，访问我们的网站虽然是https了，但是可能还是有红色不安全的标记，这个是因为我们项目中还存在着其他http链接的图片、css、js等，将这些链接替换为https，在刷新你的网站就会有安全锁了。\n\n## 最后\n拜拜！","slug":"如何申请SSL证书，让Google浏览器访问网站带安全锁","published":1,"updated":"2019-01-16T06:12:35.966Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqytnhpb000bjygv1uz7rt2l","content":"<p>目前市面上有很多免费可用的SSL证书，单个子域名免费一年，以下是链接。<br>但是可以多次申请。</p>\n<a id=\"more\"></a>\n<p><a href=\"https://common-buy.aliyun.com/?spm=5176.7968328.1266638..77cb1232rCOaQV&amp;commodityCode=cas#/buy\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">阿里云</a><br><a href=\"https://cloud.baidu.com/product/ssl.html\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">百度云</a><br><a href=\"https://buy.cloud.tencent.com/ssl?fromSource=trustasiassl\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">腾讯云</a><br><a href=\"https://portal.qiniu.com/certificate/apply?ref=www.qiniu.com\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">七牛云</a></p>\n<h2 id=\"进行购买\"><a href=\"#进行购买\" class=\"headerlink\" title=\"进行购买\"></a>进行购买</h2><blockquote>\n<p>选择Symantec 免费型DV SSL</p>\n</blockquote>\n<p><img src=\"https://img-qiniu.alwayslay.com/如何申请SSL证书，让Google浏览器访问网站带安全锁/20181229121524488.png\" alt=\"购买证书服务\"></p>\n<blockquote>\n<p>跳过上面付款的步骤，开始证书申请</p>\n</blockquote>\n<p><img src=\"https://img-qiniu.alwayslay.com/如何申请SSL证书，让Google浏览器访问网站带安全锁/20181229121842103.png\" alt=\"申请证书\"></p>\n<ol>\n<li>输入证书绑定域名，因为我们买的是单域名版，所以只能填写blog.alwayslay.com这种子域名</li>\n<li>验证方式，因为我的域名不在阿里云，所以选择手工DNS验证，不推荐使用文件验证，太麻烦了。</li>\n</ol>\n<p><img src=\"https://img-qiniu.alwayslay.com/如何申请SSL证书，让Google浏览器访问网站带安全锁/20181229122634660.png\" alt=\"验证配置信息\"></p>\n<blockquote>\n<p>接下来进入你的域名解析界面</p>\n</blockquote>\n<p><img src=\"https://img-qiniu.alwayslay.com/如何申请SSL证书，让Google浏览器访问网站带安全锁/20181229122944873.png\" alt=\"添加域名解析记录\"></p>\n<p><img src=\"https://img-qiniu.alwayslay.com/如何申请SSL证书，让Google浏览器访问网站带安全锁/20181229123047478.png\" alt=\"点击验证-》提交审核\"></p>\n<p>点击提交审核后耐心等待把，一般1个工作日内就会通知通过的。</p>\n<h2 id=\"nignx配置\"><a href=\"#nignx配置\" class=\"headerlink\" title=\"nignx配置\"></a>nignx配置</h2><p>对nginx其他的配置就不多写了，只贴SSL相关的配置的代码。<br>首先将SSL证书文件上传至服务器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    listen 443 ssl http2;</span><br><span class=\"line\">    server_name 你的域名;</span><br><span class=\"line\">    index index.html;</span><br><span class=\"line\">    root 项目存放地址;</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl_certificate /证书存放地址/证书名称.pem;</span><br><span class=\"line\">    ssl_certificate_key /证书存放地址/证书密钥名称.key;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>至此服务器的配置结束了，进入下一环节</p>\n<h2 id=\"网站配置\"><a href=\"#网站配置\" class=\"headerlink\" title=\"网站配置\"></a>网站配置</h2><p>我们将nginx配置好以后，访问我们的网站虽然是https了，但是可能还是有红色不安全的标记，这个是因为我们项目中还存在着其他http链接的图片、css、js等，将这些链接替换为https，在刷新你的网站就会有安全锁了。</p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>拜拜！</p>\n","site":{"data":{}},"excerpt":"<p>目前市面上有很多免费可用的SSL证书，单个子域名免费一年，以下是链接。<br>但是可以多次申请。</p>","more":"<p><a href=\"https://common-buy.aliyun.com/?spm=5176.7968328.1266638..77cb1232rCOaQV&amp;commodityCode=cas#/buy\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">阿里云</a><br><a href=\"https://cloud.baidu.com/product/ssl.html\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">百度云</a><br><a href=\"https://buy.cloud.tencent.com/ssl?fromSource=trustasiassl\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">腾讯云</a><br><a href=\"https://portal.qiniu.com/certificate/apply?ref=www.qiniu.com\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">七牛云</a></p>\n<h2 id=\"进行购买\"><a href=\"#进行购买\" class=\"headerlink\" title=\"进行购买\"></a>进行购买</h2><blockquote>\n<p>选择Symantec 免费型DV SSL</p>\n</blockquote>\n<p><img src=\"https://img-qiniu.alwayslay.com/如何申请SSL证书，让Google浏览器访问网站带安全锁/20181229121524488.png\" alt=\"购买证书服务\"></p>\n<blockquote>\n<p>跳过上面付款的步骤，开始证书申请</p>\n</blockquote>\n<p><img src=\"https://img-qiniu.alwayslay.com/如何申请SSL证书，让Google浏览器访问网站带安全锁/20181229121842103.png\" alt=\"申请证书\"></p>\n<ol>\n<li>输入证书绑定域名，因为我们买的是单域名版，所以只能填写blog.alwayslay.com这种子域名</li>\n<li>验证方式，因为我的域名不在阿里云，所以选择手工DNS验证，不推荐使用文件验证，太麻烦了。</li>\n</ol>\n<p><img src=\"https://img-qiniu.alwayslay.com/如何申请SSL证书，让Google浏览器访问网站带安全锁/20181229122634660.png\" alt=\"验证配置信息\"></p>\n<blockquote>\n<p>接下来进入你的域名解析界面</p>\n</blockquote>\n<p><img src=\"https://img-qiniu.alwayslay.com/如何申请SSL证书，让Google浏览器访问网站带安全锁/20181229122944873.png\" alt=\"添加域名解析记录\"></p>\n<p><img src=\"https://img-qiniu.alwayslay.com/如何申请SSL证书，让Google浏览器访问网站带安全锁/20181229123047478.png\" alt=\"点击验证-》提交审核\"></p>\n<p>点击提交审核后耐心等待把，一般1个工作日内就会通知通过的。</p>\n<h2 id=\"nignx配置\"><a href=\"#nignx配置\" class=\"headerlink\" title=\"nignx配置\"></a>nignx配置</h2><p>对nginx其他的配置就不多写了，只贴SSL相关的配置的代码。<br>首先将SSL证书文件上传至服务器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    listen 443 ssl http2;</span><br><span class=\"line\">    server_name 你的域名;</span><br><span class=\"line\">    index index.html;</span><br><span class=\"line\">    root 项目存放地址;</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl_certificate /证书存放地址/证书名称.pem;</span><br><span class=\"line\">    ssl_certificate_key /证书存放地址/证书密钥名称.key;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>至此服务器的配置结束了，进入下一环节</p>\n<h2 id=\"网站配置\"><a href=\"#网站配置\" class=\"headerlink\" title=\"网站配置\"></a>网站配置</h2><p>我们将nginx配置好以后，访问我们的网站虽然是https了，但是可能还是有红色不安全的标记，这个是因为我们项目中还存在着其他http链接的图片、css、js等，将这些链接替换为https，在刷新你的网站就会有安全锁了。</p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>拜拜！</p>"},{"title":"php扩展swoole，make安装时遇到的问题","top":0,"keywords":["swoole","php","make","socket"],"description":"php扩展安装swoole，多线程，make安装时的错误","translate_title":"php-extends-swoole,-make-installation-problems-encountered","date":"2019-01-16T06:50:44.000Z","_content":"使用的系统是mac，每个人安装时可能都不一样，以下是我碰到的问题\n最开始我是使用brew安装环境的，但是在执行下面这句话的时候提示：\"No formula found for \"swoole\".\"\n然后使用pecl进行安装 \"install failed\"\n最后选择make编译安装\n<!-- more -->\n\n### 下载并编译\n```\ngit clone git@gitee.com:swoole/swoole.git\ncd swoole\nphpize\n./configure\nmake\n```\n### 错误\n```\n/Users/xxx/package/swoole/src/os/sendfile.c:23:5: error: conflicting types for 'swoole_sendfile'\nint swoole_sendfile(int out_fd, int in_fd, off_t offset, off_t size)\n/Users/xxx/package/swoole/include/swoole.h:2166:5: note: previous declaration is here\nint swoole_sendfile(int out_fd, int in_fd, off_t offset, size_t size);\n```\n然后我就去看了这两个文件\n```\n# sendfile.c\nint swoole_sendfile(int out_fd, int in_fd, off_t *offset, off_t size)\n\n# swoole.h\n#if defined(HAVE_KQUEUE) || !defined(HAVE_SENDFILE)\nint swoole_sendfile(int out_fd, int in_fd, off_t *offset, size_t size);\n#else\n```\n\n然后我发现最后的这个size的类型不一致，我尝试将下面的 # size_t 改为 off_t\n最后make成功了\n\n### 最后\n^_^","source":"_posts/php扩展swoole，make安装时遇到的问题.md","raw":"---\ntitle: php扩展swoole，make安装时遇到的问题\ntop: 0\nkeywords:\n  - swoole\n  - php\n  - make\n  - socket\ndescription: php扩展安装swoole，多线程，make安装时的错误\ntags:\n  - swoole\n  - php\ncategories:\n  - php\ntranslate_title: 'php-extends-swoole,-make-installation-problems-encountered'\ndate: 2019-01-16 14:50:44\n---\n使用的系统是mac，每个人安装时可能都不一样，以下是我碰到的问题\n最开始我是使用brew安装环境的，但是在执行下面这句话的时候提示：\"No formula found for \"swoole\".\"\n然后使用pecl进行安装 \"install failed\"\n最后选择make编译安装\n<!-- more -->\n\n### 下载并编译\n```\ngit clone git@gitee.com:swoole/swoole.git\ncd swoole\nphpize\n./configure\nmake\n```\n### 错误\n```\n/Users/xxx/package/swoole/src/os/sendfile.c:23:5: error: conflicting types for 'swoole_sendfile'\nint swoole_sendfile(int out_fd, int in_fd, off_t offset, off_t size)\n/Users/xxx/package/swoole/include/swoole.h:2166:5: note: previous declaration is here\nint swoole_sendfile(int out_fd, int in_fd, off_t offset, size_t size);\n```\n然后我就去看了这两个文件\n```\n# sendfile.c\nint swoole_sendfile(int out_fd, int in_fd, off_t *offset, off_t size)\n\n# swoole.h\n#if defined(HAVE_KQUEUE) || !defined(HAVE_SENDFILE)\nint swoole_sendfile(int out_fd, int in_fd, off_t *offset, size_t size);\n#else\n```\n\n然后我发现最后的这个size的类型不一致，我尝试将下面的 # size_t 改为 off_t\n最后make成功了\n\n### 最后\n^_^","slug":"php扩展swoole，make安装时遇到的问题","published":1,"updated":"2019-01-16T07:04:47.765Z","_id":"cjqyucniy0000vvgv9oas6l1p","comments":1,"layout":"post","photos":[],"link":"","content":"<p>使用的系统是mac，每个人安装时可能都不一样，以下是我碰到的问题<br>最开始我是使用brew安装环境的，但是在执行下面这句话的时候提示：”No formula found for “swoole”.”<br>然后使用pecl进行安装 “install failed”<br>最后选择make编译安装<br><a id=\"more\"></a></p>\n<h3 id=\"下载并编译\"><a href=\"#下载并编译\" class=\"headerlink\" title=\"下载并编译\"></a>下载并编译</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git@gitee.com:swoole/swoole.git</span><br><span class=\"line\">cd swoole</span><br><span class=\"line\">phpize</span><br><span class=\"line\">./configure</span><br><span class=\"line\">make</span><br></pre></td></tr></table></figure>\n<h3 id=\"错误\"><a href=\"#错误\" class=\"headerlink\" title=\"错误\"></a>错误</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/Users/xxx/package/swoole/src/os/sendfile.c:23:5: error: conflicting types for &apos;swoole_sendfile&apos;</span><br><span class=\"line\">int swoole_sendfile(int out_fd, int in_fd, off_t offset, off_t size)</span><br><span class=\"line\">/Users/xxx/package/swoole/include/swoole.h:2166:5: note: previous declaration is here</span><br><span class=\"line\">int swoole_sendfile(int out_fd, int in_fd, off_t offset, size_t size);</span><br></pre></td></tr></table></figure>\n<p>然后我就去看了这两个文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># sendfile.c</span><br><span class=\"line\">int swoole_sendfile(int out_fd, int in_fd, off_t *offset, off_t size)</span><br><span class=\"line\"></span><br><span class=\"line\"># swoole.h</span><br><span class=\"line\">#if defined(HAVE_KQUEUE) || !defined(HAVE_SENDFILE)</span><br><span class=\"line\">int swoole_sendfile(int out_fd, int in_fd, off_t *offset, size_t size);</span><br><span class=\"line\">#else</span><br></pre></td></tr></table></figure></p>\n<p>然后我发现最后的这个size的类型不一致，我尝试将下面的 # size_t 改为 off_t<br>最后make成功了</p>\n<h3 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h3><p>^_^</p>\n","site":{"data":{}},"excerpt":"<p>使用的系统是mac，每个人安装时可能都不一样，以下是我碰到的问题<br>最开始我是使用brew安装环境的，但是在执行下面这句话的时候提示：”No formula found for “swoole”.”<br>然后使用pecl进行安装 “install failed”<br>最后选择make编译安装<br>","more":"</p>\n<h3 id=\"下载并编译\"><a href=\"#下载并编译\" class=\"headerlink\" title=\"下载并编译\"></a>下载并编译</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git@gitee.com:swoole/swoole.git</span><br><span class=\"line\">cd swoole</span><br><span class=\"line\">phpize</span><br><span class=\"line\">./configure</span><br><span class=\"line\">make</span><br></pre></td></tr></table></figure>\n<h3 id=\"错误\"><a href=\"#错误\" class=\"headerlink\" title=\"错误\"></a>错误</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/Users/xxx/package/swoole/src/os/sendfile.c:23:5: error: conflicting types for &apos;swoole_sendfile&apos;</span><br><span class=\"line\">int swoole_sendfile(int out_fd, int in_fd, off_t offset, off_t size)</span><br><span class=\"line\">/Users/xxx/package/swoole/include/swoole.h:2166:5: note: previous declaration is here</span><br><span class=\"line\">int swoole_sendfile(int out_fd, int in_fd, off_t offset, size_t size);</span><br></pre></td></tr></table></figure>\n<p>然后我就去看了这两个文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># sendfile.c</span><br><span class=\"line\">int swoole_sendfile(int out_fd, int in_fd, off_t *offset, off_t size)</span><br><span class=\"line\"></span><br><span class=\"line\"># swoole.h</span><br><span class=\"line\">#if defined(HAVE_KQUEUE) || !defined(HAVE_SENDFILE)</span><br><span class=\"line\">int swoole_sendfile(int out_fd, int in_fd, off_t *offset, size_t size);</span><br><span class=\"line\">#else</span><br></pre></td></tr></table></figure></p>\n<p>然后我发现最后的这个size的类型不一致，我尝试将下面的 # size_t 改为 off_t<br>最后make成功了</p>\n<h3 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h3><p>^_^</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjqytnhp60007jygvnnn9gpjt","category_id":"cjqytnhp20004jygv8pe9nmf2","_id":"cjqytnhpd000cjygvsdrc81xz"},{"post_id":"cjqytnhou0000jygvx275b0p3","category_id":"cjqytnhp20004jygv8pe9nmf2","_id":"cjqytnhpe000fjygvwul16nod"},{"post_id":"cjqytnhp00002jygv7bht5ukd","category_id":"cjqytnhp20004jygv8pe9nmf2","_id":"cjqytnhpe000gjygvbg23yq4p"},{"post_id":"cjqytnhp50006jygvyg83nk7d","category_id":"cjqytnhpd000djygvx7mn35wg","_id":"cjqytnhpf000kjygvtplxpbx2"},{"post_id":"cjqytnhp80008jygvc4z18f1h","category_id":"cjqytnhpe000hjygvu6fetvs9","_id":"cjqytnhph000qjygv5kg601d9"},{"post_id":"cjqytnhpb000bjygv1uz7rt2l","category_id":"cjqytnhpg000mjygv2n1d6w9f","_id":"cjqytnhpi000sjygvrmbmf3rb"},{"post_id":"cjqyucniy0000vvgv9oas6l1p","category_id":"cjqyucnj20001vvgvlmx671f5","_id":"cjqyucnj90004vvgvo35jlm1x"}],"PostTag":[{"post_id":"cjqytnhou0000jygvx275b0p3","tag_id":"cjqytnhp40005jygvzzbunb8k","_id":"cjqytnhpf000jjygvf6lrbwki"},{"post_id":"cjqytnhou0000jygvx275b0p3","tag_id":"cjqytnhp9000ajygvtiezer5a","_id":"cjqytnhpf000ljygvakdj9ag3"},{"post_id":"cjqytnhou0000jygvx275b0p3","tag_id":"cjqytnhpe000ejygvh9v0l3el","_id":"cjqytnhpg000ojygvggt9h36h"},{"post_id":"cjqytnhp00002jygv7bht5ukd","tag_id":"cjqytnhpf000ijygv2vpg8loo","_id":"cjqytnhpg000pjygvza2wm4xr"},{"post_id":"cjqytnhp50006jygvyg83nk7d","tag_id":"cjqytnhpg000njygvjxl0pw6o","_id":"cjqytnhpi000vjygvl3b7f85k"},{"post_id":"cjqytnhp50006jygvyg83nk7d","tag_id":"cjqytnhph000rjygvftt7rw7l","_id":"cjqytnhpj000wjygv2faekf7b"},{"post_id":"cjqytnhp50006jygvyg83nk7d","tag_id":"cjqytnhpi000tjygvkbqmxnpr","_id":"cjqytnhpj000yjygvn64h7bi5"},{"post_id":"cjqytnhp60007jygvnnn9gpjt","tag_id":"cjqytnhpi000ujygvozxmp3zm","_id":"cjqytnhpk0010jygv6yxe66v3"},{"post_id":"cjqytnhp60007jygvnnn9gpjt","tag_id":"cjqytnhpj000xjygvjbwsu8e9","_id":"cjqytnhpl0011jygvb84svopb"},{"post_id":"cjqytnhp80008jygvc4z18f1h","tag_id":"cjqytnhpf000ijygv2vpg8loo","_id":"cjqytnhpl0013jygv0p3prnex"},{"post_id":"cjqytnhpb000bjygv1uz7rt2l","tag_id":"cjqytnhpl0012jygvekx783yx","_id":"cjqytnhpn0016jygvypjjm1xz"},{"post_id":"cjqytnhpb000bjygv1uz7rt2l","tag_id":"cjqytnhpm0014jygvzhfxhzu2","_id":"cjqytnhpn0017jygvfffip4bs"},{"post_id":"cjqytnhpb000bjygv1uz7rt2l","tag_id":"cjqytnhpm0015jygvvo1mehvk","_id":"cjqytnhpn0018jygvpqfj9wh1"},{"post_id":"cjqyucniy0000vvgv9oas6l1p","tag_id":"cjqyucnj70002vvgv5sg5h9ib","_id":"cjqyucnj90005vvgvivx4zd9u"},{"post_id":"cjqyucniy0000vvgv9oas6l1p","tag_id":"cjqyucnj80003vvgvpbejmtm8","_id":"cjqyucnj90006vvgvcx1p47a4"}],"Tag":[{"name":"HexoEditor","_id":"cjqytnhp40005jygvzzbunb8k"},{"name":"markdown","_id":"cjqytnhp9000ajygvtiezer5a"},{"name":"Electron","_id":"cjqytnhpe000ejygvh9v0l3el"},{"name":"凌晨","_id":"cjqytnhpf000ijygv2vpg8loo"},{"name":"Laravel","_id":"cjqytnhpg000njygvjxl0pw6o"},{"name":"Eloquent","_id":"cjqytnhph000rjygvftt7rw7l"},{"name":"Route","_id":"cjqytnhpi000tjygvkbqmxnpr"},{"name":"seo","_id":"cjqytnhpi000ujygvozxmp3zm"},{"name":"translat","_id":"cjqytnhpj000xjygvjbwsu8e9"},{"name":"SSL","_id":"cjqytnhpl0012jygvekx783yx"},{"name":"https","_id":"cjqytnhpm0014jygvzhfxhzu2"},{"name":"nignx","_id":"cjqytnhpm0015jygvvo1mehvk"},{"name":"swoole","_id":"cjqyucnj70002vvgv5sg5h9ib"},{"name":"php","_id":"cjqyucnj80003vvgvpbejmtm8"}]}}